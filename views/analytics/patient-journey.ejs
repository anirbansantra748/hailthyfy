<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Patient Journey Analytics | Healthfy' %></title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    
    <style>
        :root {
            --primary-color: #10b981;
            --primary-dark: #059669;
            --secondary-color: #6366f1;
            --success-color: #22c55e;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --info-color: #3b82f6;
            --light-bg: #f8fafc;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --card-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .hero-section {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.95), rgba(99, 102, 241, 0.95));
            color: white;
            padding: 60px 0;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hero-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)" /></svg>');
            opacity: 0.3;
        }

        .hero-content {
            position: relative;
            z-index: 2;
        }

        .hero-title {
            font-family: 'Poppins', sans-serif;
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .hero-subtitle {
            font-size: 1.2rem;
            font-weight: 300;
            opacity: 0.9;
            margin-bottom: 2rem;
        }

        .main-content {
            margin-top: -30px;
            position: relative;
            z-index: 10;
            background: var(--light-bg);
            border-radius: 20px 20px 0 0;
            min-height: calc(100vh - 200px);
            padding: 40px 0;
        }

        .analytics-card {
            background: white;
            border-radius: 16px;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
            border: none;
            overflow: hidden;
        }

        .analytics-card:hover {
            box-shadow: var(--card-hover);
            transform: translateY(-2px);
        }

        .journey-visualization {
            background: white;
            border-radius: 16px;
            box-shadow: var(--card-shadow);
            padding: 2rem;
            margin-bottom: 2rem;
            min-height: 600px;
            position: relative;
        }

        .journey-stage {
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .journey-stage:hover {
            filter: brightness(1.1);
        }

        .journey-node {
            filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1));
        }

        .journey-text {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
        }

        .journey-link {
            stroke: var(--primary-color);
            stroke-width: 3px;
            fill: none;
            opacity: 0.7;
            transition: all 0.3s ease;
        }

        .journey-link:hover {
            opacity: 1;
            stroke-width: 4px;
        }

        .flow-particle {
            animation: flowAnimation 3s linear infinite;
        }

        @keyframes flowAnimation {
            0% { opacity: 0; }
            20% { opacity: 1; }
            80% { opacity: 1; }
            100% { opacity: 0; }
        }

        .journey-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .metric-card {
            background: linear-gradient(135deg, white 0%, #f8fafc 100%);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            border: 1px solid #e5e7eb;
            box-shadow: var(--card-shadow);
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .metric-label {
            font-size: 0.9rem;
            color: #6b7280;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .common-paths {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 2rem;
            box-shadow: var(--card-shadow);
        }

        .path-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            margin-bottom: 1rem;
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border-radius: 8px;
            border-left: 4px solid var(--primary-color);
        }

        .path-percentage {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-right: 1rem;
            min-width: 60px;
        }

        .path-details {
            flex: 1;
        }

        .path-name {
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.25rem;
        }

        .path-time {
            font-size: 0.9rem;
            color: #6b7280;
        }

        .breadcrumb {
            background: transparent;
            padding: 1rem 0;
        }

        .breadcrumb-item + .breadcrumb-item::before {
            color: rgba(255, 255, 255, 0.6);
        }

        .breadcrumb-item a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
        }

        .breadcrumb-item.active {
            color: white;
        }

        .controls-panel {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: var(--card-shadow);
        }

        .filter-group {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .stage-details-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            z-index: 10000;
            max-width: 500px;
            width: 90%;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        .tooltip {
            position: absolute;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            pointer-events: none;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .tooltip.show {
            opacity: 1;
        }

        @media (max-width: 768px) {
            .hero-title { font-size: 2rem; }
            .hero-subtitle { font-size: 1rem; }
            .main-content { margin-top: -20px; }
            .journey-visualization { min-height: 400px; padding: 1rem; }
            .journey-metrics { grid-template-columns: 1fr; }
        }

        .fade-in {
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 0.6s ease forwards;
        }

        @keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <!-- Hero Section -->
    <div class="hero-section">
        <div class="container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb justify-content-center">
                    <li class="breadcrumb-item"><a href="/"><i class="fas fa-home me-1"></i>Home</a></li>
                    <li class="breadcrumb-item"><a href="/analytics/dashboard">Analytics</a></li>
                    <li class="breadcrumb-item active">Patient Journey</li>
                </ol>
            </nav>
            
            <div class="hero-content">
                <h1 class="hero-title">
                    <i class="fas fa-route me-3"></i>
                    Patient Journey Analytics
                </h1>
                <p class="hero-subtitle">
                    Visualize and analyze patient pathways through your healthcare system
                </p>
                <div class="d-flex justify-content-center gap-3 flex-wrap">
                    <div class="badge bg-light text-dark px-3 py-2 fs-6">
                        <i class="fas fa-map-marked-alt me-2"></i>Journey Mapping
                    </div>
                    <div class="badge bg-light text-dark px-3 py-2 fs-6">
                        <i class="fas fa-chart-line me-2"></i>Flow Analysis
                    </div>
                    <div class="badge bg-light text-dark px-3 py-2 fs-6">
                        <i class="fas fa-clock me-2"></i>Time Analytics
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="container">
            <!-- Controls Panel -->
            <div class="controls-panel fade-in">
                <div class="d-flex justify-content-between align-items-center flex-wrap">
                    <h4 class="mb-0">
                        <i class="fas fa-sliders-h me-2 text-primary"></i>
                        Journey Filters
                    </h4>
                    <div class="filter-group">
                        <label class="form-label mb-0 me-2">Time Range:</label>
                        <select class="form-select" style="width: auto;" id="timeRange">
                            <option value="7d">Last 7 Days</option>
                            <option value="30d" selected>Last 30 Days</option>
                            <option value="90d">Last 90 Days</option>
                            <option value="1y">Last Year</option>
                        </select>
                        
                        <label class="form-label mb-0 me-2">Patient Type:</label>
                        <select class="form-select" style="width: auto;" id="patientType">
                            <option value="all" selected>All Patients</option>
                            <option value="new">New Patients</option>
                            <option value="returning">Returning Patients</option>
                            <option value="emergency">Emergency Cases</option>
                        </select>
                        
                        <button class="btn btn-primary" id="refreshData">
                            <i class="fas fa-sync-alt me-1"></i>Refresh
                        </button>
                    </div>
                </div>
            </div>

            <!-- Journey Metrics -->
            <div class="journey-metrics fade-in" style="animation-delay: 0.2s;">
                <div class="metric-card">
                    <div class="metric-value" id="avgJourneyTime">-</div>
                    <div class="metric-label">Average Journey Time</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="completionRate">-</div>
                    <div class="metric-label">Completion Rate</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="dropoffRate">-</div>
                    <div class="metric-label">Dropout Rate</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="totalPatients">-</div>
                    <div class="metric-label">Total Patients</div>
                </div>
            </div>

            <!-- Journey Visualization -->
            <div class="journey-visualization fade-in" style="animation-delay: 0.4s;">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="mb-0">
                        <i class="fas fa-project-diagram me-2 text-primary"></i>
                        Patient Journey Flow
                    </h3>
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-primary btn-sm active" id="viewFlow">
                            <i class="fas fa-project-diagram me-1"></i>Flow View
                        </button>
                        <button class="btn btn-outline-primary btn-sm" id="viewHeatmap">
                            <i class="fas fa-fire me-1"></i>Heatmap
                        </button>
                        <button class="btn btn-outline-primary btn-sm" id="viewSankey">
                            <i class="fas fa-stream me-1"></i>Sankey
                        </button>
                    </div>
                </div>
                <div id="journeyVisualization" class="w-100" style="height: 500px; position: relative;">
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="text-center">
                            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 text-muted">Loading patient journey data...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Common Patient Paths -->
            <div class="row g-4">
                <div class="col-lg-8">
                    <div class="common-paths fade-in" style="animation-delay: 0.6s;">
                        <h4 class="mb-4">
                            <i class="fas fa-map-signs me-2 text-success"></i>
                            Most Common Patient Paths
                        </h4>
                        <div id="commonPathsList">
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading paths...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-lg-4">
                    <div class="analytics-card fade-in" style="animation-delay: 0.8s;">
                        <div class="p-3">
                            <h5 class="mb-3">
                                <i class="fas fa-lightbulb me-2 text-warning"></i>
                                Journey Insights
                            </h5>
                            <div id="journeyInsights">
                                <div class="text-center py-4">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Generating insights...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Export Options -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="analytics-card fade-in" style="animation-delay: 1s;">
                        <div class="p-4">
                            <h5 class="mb-3">
                                <i class="fas fa-download me-2 text-info"></i>
                                Export Journey Data
                            </h5>
                            <div class="d-flex gap-2 flex-wrap">
                                <button class="btn btn-outline-primary" id="exportJSON">
                                    <i class="fas fa-file-code me-1"></i>Export as JSON
                                </button>
                                <button class="btn btn-outline-success" id="exportCSV">
                                    <i class="fas fa-file-csv me-1"></i>Export as CSV
                                </button>
                                <button class="btn btn-outline-info" id="exportImage">
                                    <i class="fas fa-image me-1"></i>Export Visualization
                                </button>
                                <button class="btn btn-outline-warning" id="shareJourney">
                                    <i class="fas fa-share me-1"></i>Share Journey
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tooltip -->
    <div id="tooltip" class="tooltip"></div>

    <!-- Quick Access Components -->
    <%- include('../partials/quick-access-fab') %>
    <%- include('../partials/quick-access-sidebar') %>
    <%- include('../partials/keyboard-shortcuts') %>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Patient Journey Analytics JavaScript -->
    <script>
        // Global variables
        let journeyData = {};
        let currentView = 'flow';
        let svg = null;
        let tooltip = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeVisualization();
            loadJourneyData();
            setupEventListeners();
        });

        // Initialize D3 visualization
        function initializeVisualization() {
            const container = d3.select('#journeyVisualization');
            const width = container.node().clientWidth;
            const height = 500;

            // Clear existing content
            container.selectAll('*').remove();

            // Create SVG
            svg = container.append('svg')
                .attr('width', width)
                .attr('height', height)
                .attr('viewBox', `0 0 ${width} ${height}`)
                .attr('preserveAspectRatio', 'xMidYMid meet');

            // Create tooltip
            tooltip = d3.select('#tooltip');

            // Add gradient definitions
            const defs = svg.append('defs');
            
            // Arrow marker
            defs.append('marker')
                .attr('id', 'arrowhead')
                .attr('markerWidth', 10)
                .attr('markerHeight', 7)
                .attr('refX', 9)
                .attr('refY', 3.5)
                .attr('orient', 'auto')
                .append('polygon')
                .attr('points', '0 0, 10 3.5, 0 7')
                .attr('fill', '#10b981');

            // Node gradients
            const gradient = defs.append('radialGradient')
                .attr('id', 'nodeGradient')
                .attr('cx', '30%')
                .attr('cy', '30%');
            
            gradient.append('stop')
                .attr('offset', '0%')
                .attr('stop-color', '#10b981')
                .attr('stop-opacity', 0.9);
            
            gradient.append('stop')
                .attr('offset', '100%')
                .attr('stop-color', '#059669')
                .attr('stop-opacity', 1);
        }

        // Load journey data from API
        async function loadJourneyData() {
            try {
                const response = await fetch('/api/analytics/patient-journey');
                const result = await response.json();
                
                if (result.success) {
                    journeyData = result.data;
                    updateMetrics();
                    updateVisualization();
                    updateCommonPaths();
                    generateInsights();
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error loading journey data:', error);
                showErrorMessage('Failed to load patient journey data');
            }
        }

        // Update journey metrics
        function updateMetrics() {
            if (journeyData.journeyMetrics) {
                document.getElementById('avgJourneyTime').textContent = 
                    journeyData.journeyMetrics.avgJourneyTime || '-';
                document.getElementById('completionRate').textContent = 
                    (journeyData.journeyMetrics.completionRate || 0) + '%';
                document.getElementById('dropoffRate').textContent = 
                    (journeyData.journeyMetrics.dropoffRate || 0) + '%';
            }
            
            if (journeyData.journeyStages) {
                const totalPatients = journeyData.journeyStages.reduce((sum, stage) => sum + stage.patients, 0);
                document.getElementById('totalPatients').textContent = totalPatients.toLocaleString();
            }
        }

        // Update visualization based on current view
        function updateVisualization() {
            if (!journeyData.journeyStages) return;

            svg.selectAll('*').remove();
            
            // Re-add defs after clearing
            const defs = svg.append('defs');
            defs.append('marker')
                .attr('id', 'arrowhead')
                .attr('markerWidth', 10)
                .attr('markerHeight', 7)
                .attr('refX', 9)
                .attr('refY', 3.5)
                .attr('orient', 'auto')
                .append('polygon')
                .attr('points', '0 0, 10 3.5, 0 7')
                .attr('fill', '#10b981');

            if (currentView === 'flow') {
                createFlowVisualization();
            } else if (currentView === 'heatmap') {
                createHeatmapVisualization();
            } else if (currentView === 'sankey') {
                createSankeyVisualization();
            }
        }

        // Create flow visualization
        function createFlowVisualization() {
            const width = svg.attr('width');
            const height = svg.attr('height');
            const stages = journeyData.journeyStages;
            const connections = journeyData.journeyConnections || [];

            // Position stages in a flow layout
            const positions = calculateFlowPositions(stages, width, height);
            
            // Draw connections
            const linkGroup = svg.append('g').attr('class', 'links');
            connections.forEach(conn => {
                const source = positions.find(p => p.stage === conn.source);
                const target = positions.find(p => p.stage === conn.target);
                
                if (source && target) {
                    const path = linkGroup.append('path')
                        .attr('class', 'journey-link')
                        .attr('d', createCurvedPath(source, target))
                        .attr('stroke', '#10b981')
                        .attr('stroke-width', Math.max(2, (conn.patients / 100) * 8))
                        .attr('stroke-opacity', 0.6)
                        .attr('fill', 'none')
                        .attr('marker-end', 'url(#arrowhead)');
                    
                    // Add hover effects
                    path.on('mouseover', function(event) {
                        d3.select(this).attr('stroke-opacity', 1);
                        showTooltip(event, `${conn.source} → ${conn.target}<br/>${conn.patients} patients`);
                    }).on('mouseout', function() {
                        d3.select(this).attr('stroke-opacity', 0.6);
                        hideTooltip();
                    });
                }
            });

            // Draw stages
            const nodeGroup = svg.append('g').attr('class', 'nodes');
            positions.forEach(pos => {
                const radius = Math.max(20, Math.min(60, Math.sqrt(pos.patients) * 2));
                
                const node = nodeGroup.append('g')
                    .attr('class', 'journey-stage')
                    .attr('transform', `translate(${pos.x}, ${pos.y})`)
                    .style('cursor', 'pointer');

                // Node circle
                node.append('circle')
                    .attr('class', 'journey-node')
                    .attr('r', radius)
                    .attr('fill', 'url(#nodeGradient)')
                    .attr('stroke', '#ffffff')
                    .attr('stroke-width', 3);

                // Node label
                const words = pos.stage.split(' ');
                if (words.length <= 2) {
                    node.append('text')
                        .attr('class', 'journey-text')
                        .attr('text-anchor', 'middle')
                        .attr('dy', '0.3em')
                        .style('fill', 'white')
                        .style('font-weight', 'bold')
                        .style('font-size', '12px')
                        .text(pos.stage);
                } else {
                    node.append('text')
                        .attr('class', 'journey-text')
                        .attr('text-anchor', 'middle')
                        .attr('dy', '-0.2em')
                        .style('fill', 'white')
                        .style('font-weight', 'bold')
                        .style('font-size', '11px')
                        .text(words.slice(0, 2).join(' '));
                    
                    node.append('text')
                        .attr('class', 'journey-text')
                        .attr('text-anchor', 'middle')
                        .attr('dy', '0.8em')
                        .style('fill', 'white')
                        .style('font-weight', 'bold')
                        .style('font-size', '11px')
                        .text(words.slice(2).join(' '));
                }

                // Patient count
                node.append('text')
                    .attr('text-anchor', 'middle')
                    .attr('dy', radius + 20)
                    .style('font-size', '12px')
                    .style('font-weight', 'bold')
                    .style('fill', '#374151')
                    .text(pos.patients.toLocaleString());

                // Add interactions
                node.on('mouseover', function(event) {
                    d3.select(this).select('.journey-node')
                        .transition().duration(200)
                        .attr('r', radius * 1.1);
                    
                    showTooltip(event, `
                        <strong>${pos.stage}</strong><br/>
                        Patients: ${pos.patients.toLocaleString()}<br/>
                        Avg Time: ${pos.avgTime} days
                    `);
                }).on('mouseout', function() {
                    d3.select(this).select('.journey-node')
                        .transition().duration(200)
                        .attr('r', radius);
                    
                    hideTooltip();
                }).on('click', function() {
                    showStageDetails(pos);
                });
            });
        }

        // Calculate flow positions for stages
        function calculateFlowPositions(stages, width, height) {
            const positions = [];
            const padding = 80;
            const usableWidth = width - (padding * 2);
            const usableHeight = height - (padding * 2);

            // Simple flow layout - arrange in columns and rows
            const cols = Math.ceil(Math.sqrt(stages.length));
            const rows = Math.ceil(stages.length / cols);
            
            stages.forEach((stage, index) => {
                const col = index % cols;
                const row = Math.floor(index / cols);
                
                const x = padding + (col * (usableWidth / (cols - 1 || 1)));
                const y = padding + (row * (usableHeight / (rows - 1 || 1)));
                
                positions.push({
                    stage: stage.stage,
                    patients: stage.patients,
                    avgTime: stage.avgTime,
                    x: x,
                    y: y
                });
            });
            
            return positions;
        }

        // Create curved path between two points
        function createCurvedPath(source, target) {
            const dx = target.x - source.x;
            const dy = target.y - source.y;
            const dr = Math.sqrt(dx * dx + dy * dy) * 0.3;
            
            return `M${source.x},${source.y}A${dr},${dr} 0 0,1 ${target.x},${target.y}`;
        }

        // Create heatmap visualization
        function createHeatmapVisualization() {
            // Implement heatmap logic here
            svg.append('text')
                .attr('x', svg.attr('width') / 2)
                .attr('y', svg.attr('height') / 2)
                .attr('text-anchor', 'middle')
                .style('font-size', '18px')
                .style('fill', '#6b7280')
                .text('Heatmap visualization coming soon...');
        }

        // Create sankey visualization
        function createSankeyVisualization() {
            // Implement sankey logic here
            svg.append('text')
                .attr('x', svg.attr('width') / 2)
                .attr('y', svg.attr('height') / 2)
                .attr('text-anchor', 'middle')
                .style('font-size', '18px')
                .style('fill', '#6b7280')
                .text('Sankey diagram coming soon...');
        }

        // Update common paths
        function updateCommonPaths() {
            const container = document.getElementById('commonPathsList');
            
            if (!journeyData.commonPaths) {
                container.innerHTML = '<p class="text-muted">No common paths data available</p>';
                return;
            }

            const pathsHtml = journeyData.commonPaths.map((path, index) => `
                <div class="path-item">
                    <div class="path-percentage">${path.percentage}%</div>
                    <div class="path-details">
                        <div class="path-name">${path.path}</div>
                        <div class="path-time">Average time: ${path.avgTime} days</div>
                    </div>
                    <div class="ms-auto">
                        <span class="badge bg-primary">#${index + 1}</span>
                    </div>
                </div>
            `).join('');

            container.innerHTML = pathsHtml;
        }

        // Generate insights
        function generateInsights() {
            setTimeout(() => {
                const insights = [
                    {
                        icon: 'fas fa-exclamation-triangle',
                        color: 'warning',
                        text: 'High dropout rate at Treatment stage (22%)'
                    },
                    {
                        icon: 'fas fa-clock',
                        color: 'info',
                        text: 'Average journey time increased by 8% this month'
                    },
                    {
                        icon: 'fas fa-arrow-up',
                        color: 'success',
                        text: 'Recovery completion rate improved to 85%'
                    }
                ];

                const insightsHtml = insights.map(insight => `
                    <div class="d-flex align-items-start mb-3">
                        <i class="${insight.icon} text-${insight.color} me-2 mt-1"></i>
                        <small class="text-muted">${insight.text}</small>
                    </div>
                `).join('');

                document.getElementById('journeyInsights').innerHTML = insightsHtml;
            }, 1500);
        }

        // Show stage details modal
        function showStageDetails(stageData) {
            const modal = document.createElement('div');
            modal.className = 'stage-details-modal';
            modal.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="mb-0">${stageData.stage}</h4>
                    <button class="btn-close" onclick="this.parentNode.parentNode.remove(); document.querySelector('.modal-overlay').remove();"></button>
                </div>
                <div class="row g-3">
                    <div class="col-6">
                        <div class="text-center">
                            <div class="h3 text-primary">${stageData.patients.toLocaleString()}</div>
                            <small class="text-muted">Patients</small>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="text-center">
                            <div class="h3 text-info">${stageData.avgTime} days</div>
                            <small class="text-muted">Avg Duration</small>
                        </div>
                    </div>
                </div>
            `;

            const overlay = document.createElement('div');
            overlay.className = 'modal-overlay';
            overlay.onclick = () => {
                modal.remove();
                overlay.remove();
            };

            document.body.appendChild(overlay);
            document.body.appendChild(modal);
        }

        // Show tooltip
        function showTooltip(event, content) {
            tooltip.html(content)
                .style('left', (event.pageX + 10) + 'px')
                .style('top', (event.pageY - 10) + 'px')
                .classed('show', true);
        }

        // Hide tooltip
        function hideTooltip() {
            tooltip.classed('show', false);
        }

        // Setup event listeners
        function setupEventListeners() {
            // View toggles
            document.getElementById('viewFlow').addEventListener('click', function() {
                setActiveView('flow', this);
            });
            
            document.getElementById('viewHeatmap').addEventListener('click', function() {
                setActiveView('heatmap', this);
            });
            
            document.getElementById('viewSankey').addEventListener('click', function() {
                setActiveView('sankey', this);
            });

            // Filters
            document.getElementById('timeRange').addEventListener('change', loadJourneyData);
            document.getElementById('patientType').addEventListener('change', loadJourneyData);
            document.getElementById('refreshData').addEventListener('click', loadJourneyData);

            // Export buttons
            document.getElementById('exportJSON').addEventListener('click', () => exportData('json'));
            document.getElementById('exportCSV').addEventListener('click', () => exportData('csv'));
            document.getElementById('exportImage').addEventListener('click', exportVisualization);
            document.getElementById('shareJourney').addEventListener('click', shareJourney);

            // Window resize
            window.addEventListener('resize', function() {
                initializeVisualization();
                updateVisualization();
            });
        }

        // Set active view
        function setActiveView(view, buttonElement) {
            currentView = view;
            document.querySelectorAll('#journeyVisualization').forEach(btn => btn.classList.remove('active'));
            buttonElement.classList.add('active');
            updateVisualization();
        }

        // Export data
        function exportData(format) {
            const timestamp = new Date().toISOString().split('T')[0];
            const filename = `patient-journey-${timestamp}`;
            
            if (format === 'json') {
                const dataStr = JSON.stringify(journeyData, null, 2);
                downloadFile(dataStr, `${filename}.json`, 'application/json');
            } else if (format === 'csv') {
                const csvData = convertToCSV(journeyData.journeyStages);
                downloadFile(csvData, `${filename}.csv`, 'text/csv');
            }
        }

        // Convert data to CSV
        function convertToCSV(data) {
            const headers = ['Stage', 'Patients', 'Avg Time (days)'];
            const csvContent = [
                headers.join(','),
                ...data.map(row => `"${row.stage}",${row.patients},${row.avgTime}`)
            ].join('\n');
            
            return csvContent;
        }

        // Download file
        function downloadFile(content, filename, contentType) {
            const blob = new Blob([content], { type: contentType });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }

        // Export visualization as image
        function exportVisualization() {
            // Implementation for exporting SVG as PNG
            const svgElement = svg.node();
            const serializer = new XMLSerializer();
            const svgString = serializer.serializeToString(svgElement);
            
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            
            img.onload = function() {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0);
                
                canvas.toBlob(function(blob) {
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `patient-journey-${new Date().toISOString().split('T')[0]}.png`;
                    link.click();
                    URL.revokeObjectURL(url);
                });
            };
            
            img.src = 'data:image/svg+xml;base64,' + btoa(svgString);
        }

        // Share journey
        function shareJourney() {
            if (navigator.share) {
                navigator.share({
                    title: 'Patient Journey Analytics',
                    text: 'Check out these patient journey insights',
                    url: window.location.href
                });
            } else {
                // Fallback: copy URL to clipboard
                navigator.clipboard.writeText(window.location.href).then(() => {
                    alert('Journey URL copied to clipboard!');
                });
            }
        }

        // Show error message
        function showErrorMessage(message) {
            const alertHtml = `
                <div class="alert alert-danger alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999;" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', alertHtml);
        }
    </script>
</body>
</html>