<%- include('../partials/header') %>

<style>
  .upload-zone {
    border: 3px dashed #007bff;
    border-radius: 10px;
    background: linear-gradient(135deg, #f8f9ff 0%, #e6f3ff 100%);
    transition: all 0.3s ease;
    cursor: pointer;
  }
  .upload-zone:hover {
    border-color: #0056b3;
    background: linear-gradient(135deg, #e6f3ff 0%, #cce7ff 100%);
    transform: translateY(-2px);
  }
  .upload-zone.dragover {
    border-color: #28a745;
    background: linear-gradient(135deg, #f0fff4 0%, #d4edda 100%);
  }
  .btn-upload {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    border: none;
    box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
  }
  .btn-upload:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
  }
  .progress-container {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
  }
  .step-indicator {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
  }
  .step {
    flex: 1;
    text-align: center;
    position: relative;
  }
  .step::after {
    content: '';
    position: absolute;
    top: 15px;
    right: -50%;
    width: 100%;
    height: 3px;
    background: #dee2e6;
    z-index: -1;
  }
  .step:last-child::after {
    display: none;
  }
  .step.active .step-circle {
    background: #007bff;
    color: white;
  }
  .step.completed .step-circle {
    background: #28a745;
    color: white;
  }
  .step.completed::after {
    background: #28a745;
  }
  .step-circle {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: #dee2e6;
    color: #6c757d;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 5px;
    font-weight: bold;
  }
</style>

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-10">
      <div class="card shadow-lg border-0">
        <div class="card-header text-white text-center py-4" style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);">
          <h2 class="mb-0">
            <i class="fas fa-x-ray me-2"></i>AI-Powered X-ray Analysis
          </h2>
          <p class="mb-0 mt-2 opacity-75">Upload your X-ray image for instant AI analysis</p>
        </div>
        <div class="card-body p-4">
          <!-- Progress Steps -->
          <div id="stepIndicator" class="step-indicator mb-4">
            <div class="step active">
              <div class="step-circle">1</div>
              <small>Upload Image</small>
            </div>
            <div class="step">
              <div class="step-circle">2</div>
              <small>Set Details</small>
            </div>
            <div class="step">
              <div class="step-circle">3</div>
              <small>AI Analysis</small>
            </div>
            <div class="step">
              <div class="step-circle">4</div>
              <small>Results</small>
            </div>
          </div>

          <!-- Upload Progress -->
          <div id="uploadProgress" class="progress-container d-none mb-4">
            <div class="text-center mb-3">
              <i class="fas fa-robot fa-3x text-primary mb-2"></i>
              <h5 id="progressTitle">Processing Your X-ray</h5>
              <p class="text-muted" id="progressText">Uploading and processing X-ray...</p>
            </div>
            <div class="progress mb-2" style="height: 10px;">
              <div class="progress-bar progress-bar-striped progress-bar-animated" 
                   role="progressbar" style="width: 0%" id="progressBar"></div>
            </div>
            <div class="text-center">
              <small class="text-muted">This usually takes 10-30 seconds</small>
            </div>
          </div>

          <!-- Upload Form -->
          <form id="xrayUploadForm" action="/prediction/xray" method="POST" enctype="multipart/form-data" novalidate>
            
            <!-- Drag and Drop Upload Zone -->
            <div class="mb-4">
              <label class="form-label fw-bold fs-5">
                <i class="fas fa-cloud-upload-alt me-2 text-primary"></i>Upload X-ray Image
                <span class="text-danger">*</span>
              </label>
              
              <!-- Simple File Upload -->
              <div class="mb-3">
                <label for="xrayImage" class="form-label btn btn-primary btn-lg d-block text-center py-4" style="cursor: pointer; border-radius: 10px;">
                  <i class="fas fa-cloud-upload-alt fa-2x mb-2 d-block"></i>
                  <span class="fs-5">Click Here to Choose X-ray Image</span>
                  <br>
                  <small class="opacity-75">Or use the browse button below</small>
                </label>
              </div>
              
              <!-- Alternative File Picker -->
              <div class="row mb-3">
                <div class="col-md-4">
                  <button type="button" class="btn btn-outline-primary btn-lg w-100" onclick="document.getElementById('xrayImage').click()">
                    <i class="fas fa-folder-open me-2"></i>Browse Files
                  </button>
                </div>
                <div class="col-md-4">
                  <a href="#" class="btn btn-success btn-lg w-100" onclick="event.preventDefault(); document.getElementById('xrayImage').click(); return false;">
                    <i class="fas fa-link me-2"></i>Anchor Pick
                  </a>
                </div>
                <div class="col-md-4">
                  <button type="button" class="btn btn-outline-secondary btn-lg w-100" onclick="testFilePicker()">
                    <i class="fas fa-vial me-2"></i>Test Picker
                  </button>
                </div>
              </div>
              
              <!-- Drag and Drop Zone -->
              <div id="uploadZone" class="upload-zone text-center py-5 px-3" style="cursor: pointer;" onclick="document.getElementById('xrayImage').click();">
                <div id="uploadContent">
                  <i class="fas fa-cloud-upload-alt fa-3x text-primary mb-3"></i>
                  <h5 class="mb-2">Or drag and drop your X-ray here</h5>
                  <p class="text-muted mb-3">Supports JPG, PNG, JPEG files up to 10MB</p>
                </div>
                
                <div id="previewContent" class="d-none">
                  <div class="row align-items-center">
                    <div class="col-md-4">
                      <img id="previewImage" class="img-fluid rounded shadow" style="max-height: 150px;">
                    </div>
                    <div class="col-md-8 text-start">
                      <h6 class="mb-1" id="fileName"></h6>
                      <p class="text-muted mb-1">
                        <i class="fas fa-hdd me-1"></i><span id="fileSize"></span>
                        <span class="mx-2">•</span>
                        <i class="fas fa-file-image me-1"></i><span id="fileType"></span>
                      </p>
                      <div class="mt-2">
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearFile()">
                          <i class="fas fa-times me-1"></i>Remove
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); document.getElementById('xrayImage').click();">
                          <i class="fas fa-edit me-1"></i>Change
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <input type="file" id="xrayImage" name="xrayImage" accept="image/jpeg,image/jpg,image/png" 
                     class="d-none" required>
              
              <!-- File Selection Status -->
              <div id="fileStatus" class="alert alert-info d-none mt-3">
                <h6><i class="fas fa-file-image me-2"></i>File Selected:</h6>
                <p class="mb-1" id="selectedFileName">No file selected</p>
                <small class="text-muted" id="selectedFileInfo">Please choose a file</small>
              </div>
              
              <div class="invalid-feedback mt-2" id="imageError">Please select a valid X-ray image.</div>
            </div>

            <div class="form-group mb-4">
              <label for="scanType" class="form-label fw-bold">
                <i class="fas fa-stethoscope me-2"></i>Scan Type
                <span class="text-danger">*</span>
              </label>
              <select
                class="form-select"
                id="scanType"
                name="scanType"
                required
              >
                <option value="">Select scan type...</option>
                <option value="chest">Chest X-ray</option>
                <option value="abdominal">Abdominal X-ray</option>
                <option value="dental">Dental X-ray</option>
                <option value="spine">Spine X-ray</option>
                <option value="limb">Limb X-ray</option>
                <option value="other">Other</option>
              </select>
              <div class="invalid-feedback">Please select a scan type.</div>
            </div>

            <div class="form-group mb-4">
              <label for="notes" class="form-label fw-bold">
                <i class="fas fa-notes-medical me-2"></i>Clinical Notes
                (Optional)
              </label>
              <textarea
                class="form-control"
                id="notes"
                name="notes"
                rows="4"
                placeholder="Enter any relevant clinical information, symptoms, or observations..."
              ></textarea>
            </div>

            <div class="d-grid gap-2">
              <button
                type="submit"
                class="btn btn-primary btn-lg"
                id="submitBtn"
              >
                <i class="fas fa-upload me-2"></i>Upload & Analyze X-ray
              </button>
              <a href="/prediction/xray" class="btn btn-outline-secondary">
                <i class="fas fa-list me-2"></i>View My X-rays
              </a>
            </div>
          </form>
        </div>
      </div>

      <!-- Upload Guidelines -->
      <div class="card mt-4">
        <div class="card-header bg-light">
          <h6 class="mb-0">
            <i class="fas fa-info-circle me-2"></i>Upload Guidelines
          </h6>
        </div>
        <div class="card-body">
          <ul class="mb-0">
            <li>Ensure the X-ray image is clear and well-lit</li>
            <li>Include the entire area of interest in the image</li>
            <li>For best results, use high-resolution images</li>
            <li>Processing typically takes 10-30 seconds</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("xrayUploadForm");
    const fileInput = document.getElementById("xrayImage");
    const scanTypeSelect = document.getElementById("scanType");
    const uploadZone = document.getElementById("uploadZone");
    const uploadContent = document.getElementById("uploadContent");
    const previewContent = document.getElementById("previewContent");
    const previewImage = document.getElementById("previewImage");
    const fileName = document.getElementById("fileName");
    const fileSize = document.getElementById("fileSize");
    const fileType = document.getElementById("fileType");
    const uploadProgress = document.getElementById("uploadProgress");
    const progressText = document.getElementById("progressText");
    const progressBar = document.getElementById("progressBar");
    const submitBtn = document.getElementById("submitBtn");
    const stepIndicator = document.getElementById("stepIndicator");
    
    let currentStep = 1;
    let selectedFile = null;
    
    // Drag and Drop Event Listeners
    uploadZone.addEventListener('dragover', handleDragOver);
    uploadZone.addEventListener('dragenter', handleDragEnter);
    uploadZone.addEventListener('dragleave', handleDragLeave);
    uploadZone.addEventListener('drop', handleDrop);
    
    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      uploadZone.addEventListener(eventName, preventDefaults, false);
      document.body.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    function handleDragEnter(e) {
      uploadZone.classList.add('dragover');
    }
    
    function handleDragOver(e) {
      uploadZone.classList.add('dragover');
    }
    
    function handleDragLeave(e) {
      if (!uploadZone.contains(e.relatedTarget)) {
        uploadZone.classList.remove('dragover');
      }
    }
    
    function handleDrop(e) {
      uploadZone.classList.remove('dragover');
      const dt = e.dataTransfer;
      const files = dt.files;
      
      if (files.length > 0) {
        handleFileSelect(files[0]);
      }
    }
    
    // Update step indicator
    function updateStep(step) {
      currentStep = step;
      const steps = stepIndicator.querySelectorAll('.step');
      
      steps.forEach((stepEl, index) => {
        stepEl.classList.remove('active', 'completed');
        if (index + 1 < step) {
          stepEl.classList.add('completed');
        } else if (index + 1 === step) {
          stepEl.classList.add('active');
        }
      });
    }
    
    // Clear file selection
    window.clearFile = function() {
      selectedFile = null;
      fileInput.value = '';
      uploadContent.classList.remove('d-none');
      previewContent.classList.add('d-none');
      updateStep(1);
      clearErrors();
    };

    // File handling function
    function handleFileSelect(file) {
      if (!file) return;
      
      // Validate file type
      const allowedTypes = ["image/jpeg", "image/jpg", "image/png"];
      if (!allowedTypes.includes(file.type)) {
        showError("Please select a valid X-ray image file (JPG, JPEG, or PNG)");
        return;
      }
      
      // Validate file size (10MB)
      if (file.size > 10 * 1024 * 1024) {
        showError("File size must be less than 10MB. Please compress your image.");
        return;
      }
      
      // Store selected file
      selectedFile = file;
      
      // Show preview
      const reader = new FileReader();
      reader.onload = function (e) {
        previewImage.src = e.target.result;
        fileName.textContent = file.name;
        fileSize.textContent = formatFileSize(file.size);
        fileType.textContent = file.type;
        
        // Switch to preview mode
        uploadContent.classList.add('d-none');
        previewContent.classList.remove('d-none');
        
        // Update step
        updateStep(2);
        
        // Clear any previous errors
        clearErrors();
      };
      reader.readAsDataURL(file);
    }
    
    // File input change handler
    fileInput.addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (file) {
        handleFileSelect(file);
      }
    });
    
    // Scan type selection handler
    scanTypeSelect.addEventListener('change', function() {
      if (this.value && selectedFile) {
        updateStep(3);
      }
    });
    
    // Test file picker function
    window.testFilePicker = function() {
      const fileInput = document.getElementById('xrayImage');
      console.log('Testing file picker...');
      console.log('File input element:', fileInput);
      console.log('File input type:', fileInput ? fileInput.type : 'NOT FOUND');
      
      alert('File input found: ' + (fileInput ? 'YES' : 'NO') + '\n' + 
            'Input type: ' + (fileInput ? fileInput.type : 'NONE') + '\n' + 
            'About to trigger click...');
      
      if (fileInput) {
        fileInput.click();
        console.log('File picker click triggered');
      } else {
        alert('ERROR: File input not found!');
      }
    };
    
    // Add event listener to track file selection
    fileInput.addEventListener('click', function() {
      console.log('File input clicked!');
      alert('File input clicked! File picker should open now.');
    });
    
    // Enhanced file change handler with debugging
    fileInput.addEventListener('change', function(e) {
      console.log('File change event triggered');
      console.log('Files selected:', e.target.files.length);
      
      const file = e.target.files[0];
      if (file) {
        console.log('File selected:', file.name, file.type, file.size);
        
        // Update visual status
        const fileStatus = document.getElementById('fileStatus');
        const fileName = document.getElementById('selectedFileName');
        const fileInfo = document.getElementById('selectedFileInfo');
        
        if (fileStatus && fileName && fileInfo) {
          fileStatus.classList.remove('d-none');
          fileStatus.className = 'alert alert-success mt-3';
          fileName.textContent = file.name;
          fileInfo.textContent = `${file.type} • ${formatFileSize(file.size)}`;
        }
        
        alert('✅ File selected: ' + file.name + ' (' + formatFileSize(file.size) + ')');
        handleFileSelect(file);
      } else {
        console.log('No file selected');
        alert('❌ No file was selected');
      }
    });

    // Form validation
    form.addEventListener("submit", function (e) {
      e.preventDefault();

      // Clear previous errors
      clearErrors();

      let isValid = true;

      // Validate file (check both file input and selectedFile from drag-and-drop)
      if (!fileInput.files[0] && !selectedFile) {
        showFieldError(fileInput, "Please select an X-ray image");
        isValid = false;
      } else if (selectedFile && !fileInput.files[0]) {
        // If we have a selectedFile from drag-and-drop, create a FileList
        const dt = new DataTransfer();
        dt.items.add(selectedFile);
        fileInput.files = dt.files;
      }

      // Validate scan type
      if (!scanTypeSelect.value) {
        showFieldError(scanTypeSelect, "Please select a scan type");
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      // Show progress
      uploadProgress.classList.remove("d-none");
      submitBtn.disabled = true;
      submitBtn.innerHTML =
        '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';

      // Simulate progress
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 90) progress = 90;
        progressBar.style.width = progress + "%";

        if (progress < 30) {
          progressText.textContent = "Uploading image...";
        } else if (progress < 60) {
          progressText.textContent = "Sending to AI analysis...";
        } else {
          progressText.textContent = "Processing results...";
        }
      }, 200);

      // Submit form using traditional form submission for redirect
      form.submit();
    });

    // Utility functions
    function formatFileSize(bytes) {
      if (bytes === 0) return "0 Bytes";
      const k = 1024;
      const sizes = ["Bytes", "KB", "MB", "GB"];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    }

    function showError(message) {
      const alertDiv = document.createElement("div");
      alertDiv.className = "alert alert-danger mt-3";
      alertDiv.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}`;
      form.appendChild(alertDiv);
      setTimeout(() => alertDiv.remove(), 5000);
    }

    function showFieldError(field, message) {
      field.classList.add("is-invalid");
      const feedback = field.parentNode.querySelector(".invalid-feedback");
      if (feedback) {
        feedback.textContent = message;
      }
    }

    function clearErrors() {
      // Remove all error alerts
      const alerts = form.querySelectorAll(".alert-danger");
      alerts.forEach((alert) => alert.remove());

      // Clear field validation errors
      const invalidFields = form.querySelectorAll(".is-invalid");
      invalidFields.forEach((field) => field.classList.remove("is-invalid"));
    }
  });
</script>

<%- include('../partials/footer') %>
