<%- include('../partials/header') %>

<!-- Modern Libraries -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>
<link href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css" rel="stylesheet">
<script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>

<style>
  :root {
    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --success-gradient: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    --warning-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    --danger-gradient: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    --info-gradient: linear-gradient(135deg, #48dbfb 0%, #0abde3 100%);
    --glass-bg: rgba(255, 255, 255, 0.1);
    --glass-border: rgba(255, 255, 255, 0.2);
    --shadow-light: 0 10px 40px rgba(0,0,0,0.1);
    --shadow-heavy: 0 20px 60px rgba(0,0,0,0.2);
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  * {
    box-sizing: border-box;
  }

  body {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    min-height: 100vh;
  }

  /* Glass morphism cards */
  .glass-card {
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 24px;
    box-shadow: var(--shadow-light);
    transition: var(--transition);
    overflow: hidden;
  }

  .glass-card:hover {
    transform: translateY(-8px);
    box-shadow: var(--shadow-heavy);
    background: rgba(255, 255, 255, 0.95);
  }

  /* Hero section */
  .hero-section {
    background: var(--primary-gradient);
    color: white;
    padding: 4rem 0;
    border-radius: 0 0 60px 60px;
    margin-bottom: 3rem;
    position: relative;
    overflow: hidden;
  }

  .hero-section::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px);
    background-size: 30px 30px;
    animation: float 6s ease-in-out infinite;
    opacity: 0.3;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }

  /* Status indicators */
  .status-indicator {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    border-radius: 50px;
    font-weight: 600;
    font-size: 1.1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    box-shadow: var(--shadow-light);
    transition: var(--transition);
  }

  .status-indicator.completed {
    background: var(--success-gradient);
    animation: pulse-success 2s infinite;
  }

  .status-indicator.processing {
    background: var(--warning-gradient);
    animation: pulse-warning 2s infinite;
  }

  .status-indicator.failed {
    background: var(--danger-gradient);
    animation: pulse-danger 2s infinite;
  }

  @keyframes pulse-success {
    0%, 100% { box-shadow: 0 0 0 0 rgba(56, 239, 125, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(56, 239, 125, 0); }
  }

  @keyframes pulse-warning {
    0%, 100% { box-shadow: 0 0 0 0 rgba(240, 147, 251, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(240, 147, 251, 0); }
  }

  @keyframes pulse-danger {
    0%, 100% { box-shadow: 0 0 0 0 rgba(255, 107, 107, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(255, 107, 107, 0); }
  }

  /* Modern stat cards */
  .stat-card {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    text-align: center;
    border: none;
    box-shadow: var(--shadow-light);
    transition: var(--transition);
    position: relative;
    overflow: hidden;
  }

  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--primary-gradient);
  }

  .stat-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: var(--shadow-heavy);
  }

  .stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem;
    font-size: 1.5rem;
    color: white;
    transition: var(--transition);
  }

  .stat-card:hover .stat-icon {
    transform: scale(1.1) rotate(10deg);
  }

  /* X-ray viewer */
  .xray-viewer {
    background: #000;
    border-radius: 20px;
    overflow: hidden;
    position: relative;
    box-shadow: var(--shadow-heavy);
  }

  .xray-image {
    width: 100%;
    height: 500px;
    object-fit: contain;
    cursor: zoom-in;
    filter: contrast(1.1) brightness(1.05);
    transition: var(--transition);
  }

  .xray-image:hover {
    filter: contrast(1.2) brightness(1.1);
    transform: scale(1.01);
  }

  .zoom-controls {
    position: absolute;
    top: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.5rem;
  }

  .zoom-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: none;
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: var(--transition);
    backdrop-filter: blur(10px);
  }

  .zoom-btn:hover {
    background: white;
    transform: scale(1.1);
  }

  /* Prediction cards */
  .prediction-card {
    background: white;
    border-radius: 16px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    border-left: 4px solid;
    transition: var(--transition);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }

  .prediction-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 0%, rgba(255,255,255,0.1) 50%, transparent 100%);
    transform: translateX(-100%);
    transition: transform 0.6s;
  }

  .prediction-card:hover::before {
    transform: translateX(100%);
  }

  .prediction-card:hover {
    transform: translateX(10px) translateY(-2px);
    box-shadow: var(--shadow-light);
  }

  .prediction-card.high-risk {
    border-left-color: #e74c3c;
    background: linear-gradient(135deg, #fff5f5 0%, #fff 100%);
  }

  .prediction-card.medium-risk {
    border-left-color: #f39c12;
    background: linear-gradient(135deg, #fffbf0 0%, #fff 100%);
  }

  .prediction-card.low-risk {
    border-left-color: #27ae60;
    background: linear-gradient(135deg, #f0fff4 0%, #fff 100%);
  }

  /* Chart container */
  .chart-container {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: var(--shadow-light);
    position: relative;
    overflow: hidden;
  }

  .chart-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--primary-gradient);
  }

  /* Action buttons */
  .action-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    margin: 0.5rem;
    border: none;
    border-radius: 50px;
    font-weight: 600;
    text-decoration: none;
    transition: var(--transition);
    box-shadow: var(--shadow-light);
    position: relative;
    overflow: hidden;
  }

  .action-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    transition: left 0.6s;
  }

  .action-btn:hover::before {
    left: 100%;
  }

  .action-btn:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-heavy);
    text-decoration: none;
  }

  .action-btn.primary { background: var(--primary-gradient); color: white; }
  .action-btn.success { background: var(--success-gradient); color: white; }
  .action-btn.warning { background: var(--warning-gradient); color: white; }
  .action-btn.danger { background: var(--danger-gradient); color: white; }
  .action-btn.info { background: var(--info-gradient); color: white; }
  .action-btn.secondary { background: #6c757d; color: white; }

  /* Risk meter */
  .risk-meter {
    width: 100%;
    height: 20px;
    background: linear-gradient(90deg, #27ae60 0%, #f39c12 50%, #e74c3c 100%);
    border-radius: 10px;
    position: relative;
    margin: 1rem 0;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
  }

  .risk-indicator {
    position: absolute;
    top: -8px;
    width: 36px;
    height: 36px;
    background: white;
    border: 3px solid #333;
    border-radius: 50%;
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: bold;
    color: #333;
    box-shadow: var(--shadow-light);
  }

  /* Floating elements */
  .floating-stats {
    position: fixed;
    right: 2rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .stat-bubble {
    width: 80px;
    height: 80px;
    background: white;
    border-radius: 50%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadow-light);
    transition: var(--transition);
    cursor: pointer;
  }

  .stat-bubble:hover {
    transform: scale(1.1);
    box-shadow: var(--shadow-heavy);
  }

  /* Loading animations */
  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem;
  }

  .loading-spinner {
    width: 60px;
    height: 60px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid var(--primary-gradient);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Notifications */
  .notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    padding: 1rem 2rem;
    border-radius: 12px;
    color: white;
    font-weight: 600;
    box-shadow: var(--shadow-heavy);
    transform: translateX(400px);
    transition: transform 0.3s ease;
    z-index: 9999;
    backdrop-filter: blur(10px);
  }

  .notification.show {
    transform: translateX(0);
  }

  .notification.success { background: var(--success-gradient); }
  .notification.warning { background: var(--warning-gradient); }
  .notification.error { background: var(--danger-gradient); }
  .notification.info { background: var(--info-gradient); }

  /* Modal enhancements */
  .modal-content {
    border-radius: 20px;
    border: none;
    box-shadow: var(--shadow-heavy);
    backdrop-filter: blur(20px);
  }

  .modal-header {
    background: var(--primary-gradient);
    color: white;
    border-radius: 20px 20px 0 0;
    border: none;
  }

  .modal-footer {
    border: none;
    border-radius: 0 0 20px 20px;
  }

  .modal-backdrop {
    backdrop-filter: blur(5px);
  }

  /* Progress bars */
  .progress {
    height: 12px;
    border-radius: 10px;
    background: #e9ecef;
    overflow: hidden;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
  }

  .progress-bar {
    border-radius: 10px;
    transition: width 1s ease;
    background: var(--primary-gradient);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .hero-section {
      padding: 2rem 0;
      border-radius: 0 0 40px 40px;
    }

    .floating-stats {
      display: none;
    }

    .xray-image {
      height: 300px;
    }

    .action-btn {
      padding: 0.75rem 1.5rem;
      margin: 0.25rem;
    }

    .stat-card {
      padding: 1.5rem;
    }
  }

  /* Print styles */
  @media print {
    .action-btn, .floating-stats, .zoom-controls, .hero-section {
      display: none !important;
    }

    .glass-card {
      background: white !important;
      box-shadow: none !important;
      border: 1px solid #ddd !important;
    }

    .container {
      max-width: 100% !important;
    }
  }

  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb {
    background: var(--primary-gradient);
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
</style>

<!-- Hero Section -->
<div class="hero-section" data-aos="fade-down">
  <div class="container">
    <div class="row align-items-center">
      <div class="col-lg-8">
        <h1 class="display-4 fw-bold mb-3">
          <i class="fas fa-microscope me-3"></i>
          X-ray Analysis Results
        </h1>
        <p class="lead opacity-90 mb-4">
          AI-powered medical imaging analysis with comprehensive insights
        </p>
        <div class="d-flex gap-3">
          <a href="/prediction/xray" class="action-btn secondary">
            <i class="fas fa-list me-2"></i>My X-rays
          </a>
          <a href="/prediction/xray/upload" class="action-btn primary">
            <i class="fas fa-plus me-2"></i>Upload Another
          </a>
        </div>
      </div>
      <div class="col-lg-4 text-center">
        <% if (xray.status === 'completed') { %>
        <div class="status-indicator completed">
          <i class="fas fa-check-circle me-2"></i>Analysis Complete
        </div>
        <% } else if (xray.status === 'processing') { %>
        <div class="status-indicator processing">
          <i class="fas fa-cog fa-spin me-2"></i>Processing
        </div>
        <% } else if (xray.status === 'failed') { %>
        <div class="status-indicator failed">
          <i class="fas fa-exclamation-triangle me-2"></i>Failed
        </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<div class="container">
  <!-- Flash Messages -->
  <% if (typeof success !== 'undefined' && success && success.length > 0) { %>
  <div class="alert alert-success alert-dismissible fade show" role="alert" data-aos="fade-in">
    <i class="fas fa-check-circle me-2"></i><%= success %>
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
  <% } %>
  <% if (typeof error !== 'undefined' && error && error.length > 0) { %>
  <div class="alert alert-danger alert-dismissible fade show" role="alert" data-aos="fade-in">
    <i class="fas fa-exclamation-triangle me-2"></i><%= error %>
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
  <% } %>

  <!-- Modern Stat Cards -->
  <div class="row mb-5" data-aos="fade-up">
    <div class="col-lg-3 col-md-6 mb-4">
      <div class="stat-card h-100">
        <div class="stat-icon" style="background: var(--success-gradient);">
          <% if (xray.status === 'completed') { %>
          <i class="fas fa-check-circle"></i>
          <% } else if (xray.status === 'processing') { %>
          <i class="fas fa-cog fa-spin"></i>
          <% } else if (xray.status === 'failed') { %>
          <i class="fas fa-exclamation-triangle"></i>
          <% } else { %>
          <i class="fas fa-question-circle"></i>
          <% } %>
        </div>
        <h6 class="text-muted mb-2 text-uppercase letter-spacing-1">Status</h6>
        <h3 class="mb-0 fw-bold">
          <%= xray.status.charAt(0).toUpperCase() + xray.status.slice(1) %>
        </h3>
      </div>
    </div>

    <div class="col-lg-3 col-md-6 mb-4">
      <div class="stat-card h-100">
        <div class="stat-icon" style="background: var(--info-gradient);">
          <i class="fas fa-stethoscope"></i>
        </div>
        <h6 class="text-muted mb-2 text-uppercase letter-spacing-1">Scan Type</h6>
        <h3 class="mb-0 fw-bold">
          <%= xray.scanType || 'Unknown' %>
        </h3>
      </div>
    </div>

    <div class="col-lg-3 col-md-6 mb-4">
      <div class="stat-card h-100">
        <div class="stat-icon" style="background: var(--primary-gradient);">
          <i class="fas fa-calendar-alt"></i>
        </div>
        <h6 class="text-muted mb-2 text-uppercase letter-spacing-1">Upload Date</h6>
        <h3 class="mb-0 fw-bold">
          <%= new Date(xray.createdAt).toLocaleDateString() %>
        </h3>
      </div>
    </div>

    <div class="col-lg-3 col-md-6 mb-4">
      <div class="stat-card h-100">
        <div class="stat-icon" style="background: var(--warning-gradient);">
          <i class="fas fa-hdd"></i>
        </div>
        <h6 class="text-muted mb-2 text-uppercase letter-spacing-1">File Size</h6>
        <h3 class="mb-0 fw-bold">
          <% if (xray.file_size) { %>
            <%= (xray.file_size / 1024 / 1024).toFixed(2) %> MB
          <% } else { %>
            Unknown
          <% } %>
        </h3>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="row mb-5">
    <!-- X-ray Image Viewer -->
    <div class="col-lg-7 mb-4" data-aos="fade-right">
      <div class="glass-card p-0">
        <div class="card-header" style="background: var(--primary-gradient); color: white; border-radius: 24px 24px 0 0; border: none; padding: 1.5rem;">
          <h4 class="mb-0 fw-bold">
            <i class="fas fa-x-ray me-2"></i>X-ray Image
            <small class="opacity-75 ms-3 fs-6"><%= xray.scanType || 'Unknown Type' %> Scan</small>
          </h4>
        </div>
        <div class="card-body p-0">
          <div class="xray-viewer">
            <% if (xray.image) { %>
            <img 
              src="/<%= xray.image %>" 
              alt="X-ray Image" 
              class="xray-image"
              id="xrayMainImage"
              onclick="openFullscreenViewer('/<%= xray.image %>')"
              onerror="showImageError(this)"
            >
            <div class="zoom-controls">
              <button class="zoom-btn" onclick="zoomIn()" title="Zoom In">
                <i class="fas fa-plus"></i>
              </button>
              <button class="zoom-btn" onclick="zoomOut()" title="Zoom Out">
                <i class="fas fa-minus"></i>
              </button>
              <button class="zoom-btn" onclick="resetZoom()" title="Reset">
                <i class="fas fa-home"></i>
              </button>
              <button class="zoom-btn" onclick="openFullscreenViewer('/<%= xray.image %>')" title="Fullscreen">
                <i class="fas fa-expand"></i>
              </button>
            </div>
            <% } else { %>
            <div class="d-flex align-items-center justify-content-center" style="height: 500px; background: #f8f9fa;">
              <div class="text-center text-muted">
                <i class="fas fa-image fa-4x mb-3 opacity-50"></i>
                <h5>X-ray Image Not Available</h5>
                <p class="mb-0">The image file could not be loaded</p>
              </div>
            </div>
            <% } %>
          </div>
          
          <!-- Image Information Panel -->
          <div class="p-4" style="background: rgba(248, 249, 250, 0.5);">
            <div class="row text-center">
              <div class="col-md-4">
                <div class="stat-item">
                  <i class="fas fa-file fa-2x mb-2" style="color: var(--primary-gradient);"></i>
                  <h6 class="fw-bold mb-1">File Name</h6>
                  <small class="text-muted"><%= xray.file_name || 'Unknown' %></small>
                </div>
              </div>
              <div class="col-md-4">
                <div class="stat-item">
                  <i class="fas fa-code fa-2x mb-2" style="color: var(--success-gradient);"></i>
                  <h6 class="fw-bold mb-1">File Type</h6>
                  <small class="text-muted"><%= xray.file_mimetype || 'Unknown' %></small>
                </div>
              </div>
              <div class="col-md-4">
                <div class="stat-item">
                  <i class="fas fa-clock fa-2x mb-2" style="color: var(--info-gradient);"></i>
                  <h6 class="fw-bold mb-1">Uploaded</h6>
                  <small class="text-muted"><%= new Date(xray.createdAt).toLocaleString() %></small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Results Panel -->
    <div class="col-md-6 mb-4">
      <% if (xray.status === 'completed' && xray.predictions) { %>
      <!-- Success Results -->
      <div class="card h-100">
        <div class="card-header bg-success text-white">
          <h5 class="mb-0">
            <i class="fas fa-check-circle me-2"></i>Analysis Complete
          </h5>
        </div>
        <div class="card-body">
          <!-- Top 3 Findings -->
          <div class="mb-4">
            <h6 class="fw-bold text-success">Top Findings</h6>
            <% const predictions = xray.predictions || {}; const topFindings =
            Object.entries(predictions) .sort(([,a], [,b]) => b - a) .slice(0,
            3); %> <% topFindings.forEach(([label, confidence], index) => { %>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span class="fw-bold">
                <% if (index === 0) { %>
                <i class="fas fa-trophy text-warning me-1"></i>
                <% } else if (index === 1) { %>
                <i class="fas fa-medal text-secondary me-1"></i>
                <% } else { %>
                <i class="fas fa-award text-bronze me-1"></i>
                <% } %> <%= label.replace(/_/g, ' ') %>
              </span>
              <span class="badge bg-primary fs-6">
                <%= (confidence * 100).toFixed(1) %>%
              </span>
            </div>
            <% }); %>
          </div>

          <!-- Model Info -->
          <div class="mb-3">
            <h6 class="fw-bold">Model Information</h6>
            <div class="row">
              <div class="col-6">
                <small class="text-muted">Version:</small><br />
                <strong><%= xray.model_version || 'Unknown' %></strong>
              </div>
              <div class="col-6">
                <small class="text-muted">Inference Time:</small><br />
                <strong>
                  <%= xray.inference_time_ms ? `${xray.inference_time_ms}ms` :
                  'Unknown' %>
                </strong>
              </div>
            </div>
          </div>

          <!-- Inference ID -->
          <% if (xray.inference_id) { %>
          <div class="mb-3">
            <h6 class="fw-bold">Analysis ID</h6>
            <small class="text-muted"><%= xray.inference_id %></small>
          </div>
          <% } %>

          <!-- Processed Date -->
          <% if (xray.processed_at) { %>
          <div class="mb-3">
            <h6 class="fw-bold">Processed</h6>
            <small class="text-muted">
              <%= new Date(xray.processed_at).toLocaleString() %>
            </small>
          </div>
          <% } %>
        </div>
      </div>

      <% } else if (xray.status === 'processing') { %>
      <!-- Processing Status -->
      <div class="card h-100">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">
            <i class="fas fa-spinner fa-spin me-2"></i>Processing
          </h5>
        </div>
        <div class="card-body text-center">
          <div class="mb-4">
            <i class="fas fa-cogs fa-3x text-warning mb-3"></i>
            <h5>Analysis in Progress</h5>
            <p class="text-muted">
              Your X-ray is being analyzed by our AI system. This typically
              takes 10-30 seconds.
            </p>
          </div>

          <div class="progress mb-3">
            <div
              class="progress-bar progress-bar-striped progress-bar-animated"
              role="progressbar"
              style="width: 75%"
            ></div>
          </div>

          <small class="text-muted"
            >Please refresh the page to check for updates</small
          >
        </div>
      </div>

      <% } else if (xray.status === 'failed') { %>
      <!-- Failed Status -->
      <div class="card h-100">
        <div class="card-header bg-danger text-white">
          <h5 class="mb-0">
            <i class="fas fa-exclamation-triangle me-2"></i>Analysis Failed
          </h5>
        </div>
        <div class="card-body text-center">
          <div class="mb-4">
            <i class="fas fa-times-circle fa-3x text-danger mb-3"></i>
            <h5>Processing Failed</h5>
            <p class="text-danger">
              <%= xray.error_message || 'Unknown error occurred' %>
            </p>
          </div>

          <div class="d-grid gap-2">
            <button class="btn btn-outline-danger" onclick="retryAnalysis()">
              <i class="fas fa-redo me-2"></i>Retry Analysis
            </button>
            <a href="/prediction/xray/upload" class="btn btn-primary">
              <i class="fas fa-upload me-2"></i>Upload New Image
            </a>
          </div>
        </div>
      </div>

      <% } else { %>
      <!-- Other Status -->
      <div class="card h-100">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">
            <i class="fas fa-info-circle me-2"></i>Status: <%= xray.status %>
          </h5>
        </div>
        <div class="card-body text-center">
          <div class="mb-4">
            <i class="fas fa-question-circle fa-3x text-secondary mb-3"></i>
            <h5>Unknown Status</h5>
            <p class="text-muted">
              The current status is unclear. Please contact support if this
              persists.
            </p>
          </div>
        </div>
      </div>
      <% } %>
    </div>
  </div>

  <!-- Detailed Results Section -->
  <% if (xray.status === 'completed' && xray.predictions &&
  Object.keys(xray.predictions).length > 0) { %>
  <div class="row">
    <!-- Predictions Table -->
    <div class="col-md-6 mb-4">
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-gradient-primary text-white">
          <h5 class="mb-0">
            <i class="fas fa-table me-2"></i>Detailed Findings
          </h5>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-hover mb-0">
              <thead class="table-dark">
                <tr>
                  <th class="border-0">
                    <i class="fas fa-search me-2"></i>Finding
                  </th>
                  <th class="text-end border-0">
                    <i class="fas fa-percentage me-2"></i>Probability
                  </th>
                  <th class="text-center border-0">
                    <i class="fas fa-exclamation-triangle me-2"></i>Risk Level
                  </th>
                </tr>
              </thead>
              <tbody>
                <% const sortedPredictions = Object.entries(xray.predictions)
                .sort(([,a], [,b]) => b - a); sortedPredictions.forEach(([label,
                confidence]) => { %>
                <tr>
                  <td class="align-middle">
                    <strong><%= label.replace(/_/g, ' ') %></strong>
                  </td>
                  <td class="text-end align-middle">
                    <div class="d-flex align-items-center justify-content-end">
                      <div
                        class="progress me-2"
                        style="width: 60px; height: 8px"
                      >
                        <div
                          class="progress-bar <% if (confidence >= 0.7) { %>bg-danger<% } else if (confidence >= 0.4) { %>bg-warning<% } else { %>bg-success<% } %>"
                          style="width: <%= (confidence * 100).toFixed(1) %>%"
                        ></div>
                      </div>
                      <span class="fw-bold">
                        <%= (confidence * 100).toFixed(1) %>%
                      </span>
                    </div>
                  </td>
                  <td class="text-center align-middle">
                    <% if (confidence >= 0.7) { %>
                    <span class="badge risk-high text-white px-3 py-2"
                      >High Risk</span
                    >
                    <% } else if (confidence >= 0.4) { %>
                    <span class="badge risk-medium text-dark px-3 py-2"
                      >Medium Risk</span
                    >
                    <% } else { %>
                    <span class="badge risk-low text-white px-3 py-2"
                      >Low Risk</span
                    >
                    <% } %>
                  </td>
                </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Chart Visualization -->
    <div class="col-md-6 mb-4">
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-gradient-primary text-white">
          <h5 class="mb-0">
            <i class="fas fa-chart-bar me-2"></i>Probability Distribution
          </h5>
        </div>
        <div class="card-body p-4">
          <div class="chart-container">
            <canvas id="predictionsChart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Clinical Notes -->
  <% if (xray.notes) { %>
  <div class="row mb-4">
    <div class="col-12">
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-gradient-primary text-white">
          <h5 class="mb-0">
            <i class="fas fa-notes-medical me-2"></i>Clinical Notes
          </h5>
        </div>
        <div class="card-body p-4">
          <p class="mb-0 fs-5"><%= xray.notes %></p>
        </div>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Analysis Summary -->
  <% if (xray.status === 'completed') { %>
  <div class="row mb-4">
    <div class="col-12">
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-success text-white">
          <h5 class="mb-0">
            <i class="fas fa-clipboard-check me-2"></i>Analysis Summary
          </h5>
        </div>
        <div class="card-body p-4">
          <div class="row">
            <div class="col-md-3 text-center mb-3">
              <div class="p-3 bg-light rounded">
                <i class="fas fa-brain fa-2x text-primary mb-2"></i>
                <h6 class="mb-1">Model Version</h6>
                <p class="mb-0 fw-bold">
                  <%= xray.model_version || 'Unknown' %>
                </p>
              </div>
            </div>
            <div class="col-md-3 text-center mb-3">
              <div class="p-3 bg-light rounded">
                <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                <h6 class="mb-1">Processing Time</h6>
                <p class="mb-0 fw-bold">
                  <%= xray.inference_time_ms ? `${xray.inference_time_ms}ms` :
                  'Unknown' %>
                </p>
              </div>
            </div>
            <div class="col-md-3 text-center mb-3">
              <div class="p-3 bg-light rounded">
                <i class="fas fa-fingerprint fa-2x text-info mb-2"></i>
                <h6 class="mb-1">Analysis ID</h6>
                <p class="mb-0 fw-bold"><%= xray.inference_id || 'N/A' %></p>
              </div>
            </div>
            <div class="col-md-3 text-center mb-3">
              <div class="p-3 bg-light rounded">
                <i class="fas fa-calendar-check fa-2x text-success mb-2"></i>
                <h6 class="mb-1">Processed</h6>
                <p class="mb-0 fw-bold">
                  <%= xray.processed_at ? new
                  Date(xray.processed_at).toLocaleDateString() : 'N/A' %>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% } %> <% if (xray.status === 'completed' && (!xray.predictions ||
  Object.keys(xray.predictions).length === 0)) { %>
  <!-- Fallback UI for completed but no predictions -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">
            <i class="fas fa-exclamation-triangle me-2"></i>No Predictions
            Available
          </h5>
        </div>
        <div class="card-body text-center">
          <div class="mb-4">
            <i class="fas fa-question-circle fa-3x text-warning mb-3"></i>
            <h5>Analysis Completed but No Results</h5>
            <p class="text-muted">
              The AI analysis completed successfully, but no prediction results
              were generated for this X-ray.
            </p>
          </div>
          <div class="d-grid gap-2 d-md-flex justify-content-md-center">
            <button class="btn btn-outline-warning" onclick="retryAnalysis()">
              <i class="fas fa-redo me-2"></i>Retry Analysis
            </button>
            <a href="/prediction/xray/upload" class="btn btn-primary">
              <i class="fas fa-upload me-2"></i>Upload New X-ray
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Action Buttons -->
  <div class="row mb-4">
    <div class="col-12 text-center">
      <div class="btn-group" role="group">
        <a href="/prediction/xray" class="btn btn-outline-secondary btn-lg">
          <i class="fas fa-list me-2"></i>Back to List
        </a>
        <a href="/prediction/xray/upload" class="btn btn-primary btn-lg">
          <i class="fas fa-plus me-2"></i>Upload Another
        </a>
        <% if (xray.status === 'completed') { %>
        <button class="btn btn-outline-info btn-lg" onclick="downloadReport()">
          <i class="fas fa-download me-2"></i>Download Report
        </button>
        <button class="btn btn-outline-success btn-lg" onclick="shareResults()">
          <i class="fas fa-share me-2"></i>Share Results
        </button>
        <button class="btn btn-outline-warning btn-lg" onclick="printResults()">
          <i class="fas fa-print me-2"></i>Print
        </button>
        <button class="btn btn-outline-dark btn-lg" onclick="exportResults()">
          <i class="fas fa-file-export me-2"></i>Export
        </button>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Floating Action Button -->
  <div class="position-fixed" style="bottom: 30px; right: 30px; z-index: 1000">
    <div class="btn-group-vertical">
      <button
        class="btn btn-primary rounded-circle mb-2"
        style="width: 60px; height: 60px"
        onclick="scrollToTop()"
        title="Back to Top"
      >
        <i class="fas fa-arrow-up fa-lg"></i>
      </button>
      <button
        class="btn btn-info rounded-circle"
        style="width: 60px; height: 60px"
        onclick="toggleFullscreen()"
        title="Toggle Fullscreen"
      >
        <i class="fas fa-expand fa-lg"></i>
      </button>
    </div>
  </div>

  <!-- Floating Stats -->
  <div class="floating-stats">
    <div class="stat-bubble" title="Analysis Accuracy" data-bs-toggle="tooltip">
      <i class="fas fa-bullseye" style="color: var(--primary-gradient); font-size: 1.2rem;"></i>
      <small class="fw-bold mt-1">
        <% if (xray.status === 'completed' && xray.predictions && Object.keys(xray.predictions).length > 0) { %>
          <%= Math.round(Object.values(xray.predictions)[0] * 100) %>%
        <% } else { %>
          --%
        <% } %>
      </small>
    </div>
    <div class="stat-bubble" title="Processing Speed" data-bs-toggle="tooltip">
      <i class="fas fa-tachometer-alt" style="color: var(--success-gradient); font-size: 1.2rem;"></i>
      <small class="fw-bold mt-1">
        <%= xray.inference_time_ms ? `${Math.round(xray.inference_time_ms / 1000)}s` : '--s' %>
      </small>
    </div>
    <div class="stat-bubble" title="Model Confidence" data-bs-toggle="tooltip">
      <i class="fas fa-brain" style="color: var(--info-gradient); font-size: 1.2rem;"></i>
      <small class="fw-bold mt-1">
        <% if (xray.status === 'completed' && xray.predictions) { %>
          <% const avgConfidence = Object.values(xray.predictions).reduce((a, b) => a + b, 0) / Object.values(xray.predictions).length; %>
          <%= Math.round(avgConfidence * 100) %>%
        <% } else { %>
          --%
        <% } %>
      </small>
    </div>
  </div>
</div>

<!-- Chart Data Preparation -->
<% const chartSource = (xray && xray.status === 'completed' && xray.predictions)
? xray.predictions : {}; const chartEntries = Object.entries(chartSource)
.sort(([, a], [, b]) => b - a) .map(([label, confidence]) => ({ label:
label.replace(/_/g, ' '), confidence: Math.round((confidence * 100) * 10) / 10
})); const chartLabels = chartEntries.map(d => d.label); const chartValues =
chartEntries.map(d => d.confidence); %>

<script>
  // Initialize Chart.js visualization
  document.addEventListener("DOMContentLoaded", function () {
    // Only run if chart data is available
    var chartLabels = JSON.parse("<%- JSON.stringify(chartLabels) %>");
    var chartValues = JSON.parse("<%- JSON.stringify(chartValues) %>");

    if (
      Array.isArray(chartLabels) &&
      Array.isArray(chartValues) &&
      chartLabels.length > 0 &&
      chartValues.length > 0
    ) {
      try {
        const chartElement = document.getElementById("predictionsChart");
        if (!chartElement) {
          console.warn("Chart element not found");
          return;
        }

        const ctx = chartElement.getContext("2d");
        if (!ctx) {
          console.warn("Could not get chart context");
          return;
        }

        new Chart(ctx, {
          type: "bar",
          data: {
            labels: chartLabels,
            datasets: [
              {
                label: "Probability (%)",
                data: chartValues,
                backgroundColor: chartValues.map((val) => {
                  if (val >= 70) return "rgba(220, 53, 69, 0.8)"; // Red for high
                  if (val >= 40) return "rgba(255, 193, 7, 0.8)"; // Yellow for medium
                  return "rgba(40, 167, 69, 0.8)"; // Green for low
                }),
                borderColor: chartValues.map((val) => {
                  if (val >= 70) return "rgba(220, 53, 69, 1)";
                  if (val >= 40) return "rgba(255, 193, 7, 1)";
                  return "rgba(40, 167, 69, 1)";
                }),
                borderWidth: 1,
              },
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
              duration: 2000,
              easing: "easeInOutQuart",
            },
            scales: {
              y: {
                beginAtZero: true,
                max: 100,
                grid: {
                  color: "rgba(0,0,0,0.1)",
                  drawBorder: false,
                },
                ticks: {
                  callback: function (value) {
                    return value + "%";
                  },
                  font: {
                    weight: "bold",
                  },
                },
              },
              x: {
                grid: {
                  display: false,
                },
                ticks: {
                  font: {
                    weight: "bold",
                  },
                },
              },
            },
            plugins: {
              legend: {
                display: false,
              },
              tooltip: {
                backgroundColor: "rgba(0,0,0,0.8)",
                titleColor: "white",
                bodyColor: "white",
                borderColor: "rgba(255,255,255,0.2)",
                borderWidth: 1,
                cornerRadius: 8,
                callbacks: {
                  label: function (context) {
                    return context.parsed.y.toFixed(1) + "%";
                  },
                },
              },
            },
            interaction: {
              intersect: false,
              mode: "index",
            },
          },
        });
      } catch (error) {
        console.error("Error initializing chart:", error);
      }
    }
  });

  // Retry analysis function
  function retryAnalysis() {
    if (confirm("Are you sure you want to retry the analysis?")) {
      fetch(`/prediction/xray/<%= xray._id %>/retry`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            location.reload();
          } else {
            alert("Retry failed: " + (data.message || "Unknown error"));
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          alert("Retry failed. Please try again.");
        });
    }
  }

  // Enhanced download report function
  function downloadReport() {
    showNotification('Generating comprehensive report...', 'info');
    
    const xrayData = {
      id: "<%= xray._id %>",
      status: "<%= xray.status %>",
      scanType: "<%= xray.scanType %>",
      uploadDate: "<%= xray.createdAt %>",
      processedAt: "<%= xray.processed_at || 'N/A' %>",
      predictions: JSON.parse('<%- JSON.stringify(xray.predictions || {}) %>'),
      modelVersion: "<%= xray.model_version || 'N/A' %>",
      inferenceTime: "<%= xray.inference_time_ms || 'N/A' %>ms",
      notes: "<%= xray.notes || 'No notes' %>",
      fileName: "<%= xray.file_name || 'Unknown' %>",
      fileSize: "<%= xray.file_size || 0 %>"
    };
    
    // Create comprehensive report content
    const reportContent = `
╔═══════════════════════════════════════════════════════════════╗
║                    HEALTHFY AI X-RAY ANALYSIS REPORT          ║
╚═══════════════════════════════════════════════════════════════╝

📋 PATIENT INFORMATION
┌─────────────────────────────────────────────────────────────┐
│ Report ID     : ${xrayData.id}
│ Scan Type     : ${xrayData.scanType}
│ File Name     : ${xrayData.fileName}
│ File Size     : ${(xrayData.fileSize / 1024 / 1024).toFixed(2)} MB
│ Upload Date   : ${new Date(xrayData.uploadDate).toLocaleString()}
│ Processed     : ${xrayData.processedAt !== 'N/A' ? new Date(xrayData.processedAt).toLocaleString() : 'N/A'}
└─────────────────────────────────────────────────────────────┘

🔬 ANALYSIS RESULTS
┌─────────────────────────────────────────────────────────────┐
│ Status        : ${xrayData.status.toUpperCase()}
│ Model Version : ${xrayData.modelVersion}
│ Process Time  : ${xrayData.inferenceTime}
│ Analysis Date : ${new Date().toLocaleString()}
└─────────────────────────────────────────────────────────────┘

📊 AI PREDICTIONS & FINDINGS
┌─────────────────────────────────────────────────────────────┐
${Object.entries(xrayData.predictions)
  .sort(([,a], [,b]) => b - a)
  .map(([condition, confidence], index) => {
    const percentage = (confidence * 100).toFixed(1);
    const riskLevel = confidence >= 0.7 ? '🔴 HIGH' : confidence >= 0.4 ? '🟡 MEDIUM' : '🟢 LOW';
    const rank = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📍';
    return `│ ${rank} ${condition.replace(/_/g, ' ').padEnd(35)} : ${percentage.padStart(6)}% (${riskLevel})`;
  }).join('\n')}
└─────────────────────────────────────────────────────────────┘

📝 CLINICAL NOTES
┌─────────────────────────────────────────────────────────────┐
│ ${xrayData.notes.split('\n').map(line => `${line.padEnd(59)}`).join('\n│ ')}
└─────────────────────────────────────────────────────────────┘

⚠️  MEDICAL DISCLAIMER
┌─────────────────────────────────────────────────────────────┐
│ This analysis is generated by AI and should NOT be used as  │
│ a substitute for professional medical diagnosis. Please     │
│ consult with a qualified healthcare provider for proper     │
│ medical interpretation and treatment decisions.             │
│                                                             │
│ This report is for informational purposes only and does    │
│ not constitute medical advice, diagnosis, or treatment.     │
└─────────────────────────────────────────────────────────────┘

📄 REPORT METADATA
┌─────────────────────────────────────────────────────────────┐
│ Generated by  : HealthFy AI Medical Assistant
│ Generated on  : ${new Date().toLocaleString()}
│ Report Format : Comprehensive Text Analysis
│ Version       : 2.0
└─────────────────────────────────────────────────────────────┘

© ${new Date().getFullYear()} HealthFy - AI-Powered Medical Imaging Analysis
    `;
    
    // Create and download file
    const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `healthfy-xray-report-${xrayData.id}-${new Date().toISOString().split('T')[0]}.txt`;
    a.style.display = 'none';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('Report downloaded successfully!', 'success');
  }

  function shareResults() {
    if (navigator.share) {
      navigator.share({
        title: "X-ray Analysis Results",
        text: "Check out my X-ray analysis results from Healthfy!",
        url: window.location.href,
      });
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href).then(() => {
        alert("Results URL copied to clipboard!");
      });
    }
  }

  function scrollToTop() {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }

  function toggleFullscreen() {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  }

  // Add smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute("href"));
      if (target) {
        target.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      }
    });
  });

  // Add loading animation for buttons
  document.querySelectorAll("button").forEach((button) => {
    button.addEventListener("click", function () {
      if (!this.classList.contains("btn-loading")) {
        this.classList.add("btn-loading");
        this.disabled = true;

        setTimeout(() => {
          this.classList.remove("btn-loading");
          this.disabled = false;
        }, 2000);
      }
    });
  });

  // Add print functionality
  function printResults() {
    window.print();
  }

  // Add export functionality
  function exportResults() {
    const data = {
      report: {
        id: "<%= xray._id %>",
        timestamp: new Date().toISOString(),
        patient: {
          userId: "<%= user._id %>",
          userName: "<%= user.name || user.email %>"
        },
        xray: {
          status: "<%= xray.status %>",
          scanType: "<%= xray.scanType %>",
          uploadDate: "<%= xray.createdAt %>",
          processedAt: "<%= xray.processed_at || null %>",
          fileName: "<%= xray.file_name || 'Unknown' %>",
          fileSize: "<%= xray.file_size || 0 %>",
          notes: "<%= xray.notes || '' %>"
        },
        analysis: {
          predictions: JSON.parse('<%- JSON.stringify(xray.predictions || {}) %>'),
          modelVersion: "<%= xray.model_version || 'Unknown' %>",
          inferenceId: "<%= xray.inference_id || 'N/A' %>",
          inferenceTimeMs: "<%= xray.inference_time_ms || 0 %>",
          topFindings: Object.entries(JSON.parse('<%- JSON.stringify(xray.predictions || {}) %>'))
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5)
            .map(([condition, confidence]) => ({
              condition: condition.replace(/_/g, ' '),
              confidence: Math.round(confidence * 1000) / 10 + '%'
            }))
        },
        disclaimer: "This analysis is generated by AI and should not be used as a substitute for professional medical diagnosis. Please consult with a qualified healthcare provider for proper medical interpretation."
      }
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `healthfy-xray-analysis-<%= xray._id %>.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    // Show success message
    const toast = document.createElement('div');
    toast.className = 'position-fixed top-0 end-0 p-3';
    toast.style.zIndex = '9999';
    toast.innerHTML = `
      <div class="toast show" role="alert">
        <div class="toast-header bg-success text-white">
          <i class="fas fa-check-circle me-2"></i>
          <strong class="me-auto">Export Successful</strong>
        </div>
        <div class="toast-body">Analysis results exported successfully!</div>
      </div>
    `;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  }

  // Initialize AOS animations
  AOS.init({
    duration: 800,
    once: true,
    offset: 100
  });

  // Global zoom level for X-ray image
  let currentZoom = 1;
  let isDragging = false;
  let dragStart = { x: 0, y: 0 };
  let imagePosition = { x: 0, y: 0 };

  // Zoom functionality
  function zoomIn() {
    currentZoom = Math.min(currentZoom * 1.2, 5);
    updateImageZoom();
    showNotification(`Zoomed to ${Math.round(currentZoom * 100)}%`, 'info');
  }

  function zoomOut() {
    currentZoom = Math.max(currentZoom / 1.2, 0.5);
    updateImageZoom();
    showNotification(`Zoomed to ${Math.round(currentZoom * 100)}%`, 'info');
  }

  function resetZoom() {
    currentZoom = 1;
    imagePosition = { x: 0, y: 0 };
    updateImageZoom();
    showNotification('Zoom reset', 'info');
  }

  function updateImageZoom() {
    const img = document.getElementById('xrayMainImage');
    if (img) {
      img.style.transform = `scale(${currentZoom}) translate(${imagePosition.x}px, ${imagePosition.y}px)`;
      img.style.cursor = currentZoom > 1 ? 'move' : 'zoom-in';
    }
  }

  // Enhanced image modal with zoom and pan
  function openFullscreenViewer(imageSrc) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';
    modal.style.zIndex = '9999';
    modal.innerHTML = `
      <div class="position-relative">
        <img src="${imageSrc}" alt="X-ray Fullscreen" style="max-width: 95vw; max-height: 95vh; border-radius: 20px; box-shadow: var(--shadow-heavy);" id="fullscreenImage">
        <div class="position-absolute top-0 end-0 m-3">
          <div class="d-flex gap-2">
            <button class="zoom-btn" onclick="adjustModalZoom(1.2)">
              <i class="fas fa-plus"></i>
            </button>
            <button class="zoom-btn" onclick="adjustModalZoom(0.8)">
              <i class="fas fa-minus"></i>
            </button>
            <button class="zoom-btn" onclick="resetModalZoom()">
              <i class="fas fa-home"></i>
            </button>
            <a href="${imageSrc}" download class="zoom-btn">
              <i class="fas fa-download"></i>
            </a>
            <button class="zoom-btn" onclick="this.closest('.modal-overlay').remove()">
              <i class="fas fa-times"></i>
            </button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.remove();
      }
    });

    // Add keyboard support
    document.addEventListener('keydown', function(e) {
      if (modal.parentNode) {
        if (e.key === 'Escape') modal.remove();
        if (e.key === '+' || e.key === '=') adjustModalZoom(1.2);
        if (e.key === '-') adjustModalZoom(0.8);
        if (e.key === '0') resetModalZoom();
      }
    });
  }

  let modalZoom = 1;
  function adjustModalZoom(factor) {
    modalZoom = Math.max(0.5, Math.min(5, modalZoom * factor));
    const img = document.getElementById('fullscreenImage');
    if (img) {
      img.style.transform = `scale(${modalZoom})`;
      showNotification(`Fullscreen zoom: ${Math.round(modalZoom * 100)}%`, 'info');
    }
  }

  function resetModalZoom() {
    modalZoom = 1;
    const img = document.getElementById('fullscreenImage');
    if (img) {
      img.style.transform = 'scale(1)';
      showNotification('Fullscreen zoom reset', 'info');
    }
  }

  // Enhanced notification system
  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const icon = {
      success: 'fas fa-check-circle',
      error: 'fas fa-exclamation-triangle', 
      warning: 'fas fa-exclamation-circle',
      info: 'fas fa-info-circle'
    }[type] || 'fas fa-info-circle';
    
    notification.innerHTML = `
      <div class="d-flex align-items-center gap-2">
        <i class="${icon}"></i>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Image error handling
  function showImageError(img) {
    const container = img.parentElement;
    container.innerHTML = `
      <div class="d-flex align-items-center justify-content-center text-muted" style="height: 500px; background: #f8f9fa; border-radius: 20px;">
        <div class="text-center">
          <i class="fas fa-exclamation-triangle fa-4x mb-3 opacity-50"></i>
          <h5>Image Not Available</h5>
          <p class="mb-0">The X-ray image could not be loaded</p>
          <small class="text-muted">Please check the file path and try again</small>
        </div>
      </div>
    `;
  }

  // Add drag functionality for zoomed images
  document.addEventListener('DOMContentLoaded', function() {
    const img = document.getElementById('xrayMainImage');
    if (img) {
      img.addEventListener('mousedown', startDrag);
      img.addEventListener('wheel', handleWheel, { passive: false });
    }
  });

  function startDrag(e) {
    if (currentZoom <= 1) return;
    
    isDragging = true;
    dragStart = { x: e.clientX - imagePosition.x, y: e.clientY - imagePosition.y };
    
    document.addEventListener('mousemove', handleDrag);
    document.addEventListener('mouseup', stopDrag);
    
    e.preventDefault();
  }

  function handleDrag(e) {
    if (!isDragging) return;
    
    imagePosition = {
      x: e.clientX - dragStart.x,
      y: e.clientY - dragStart.y
    };
    
    updateImageZoom();
  }

  function stopDrag() {
    isDragging = false;
    document.removeEventListener('mousemove', handleDrag);
    document.removeEventListener('mouseup', stopDrag);
  }

  function handleWheel(e) {
    e.preventDefault();
    const delta = e.deltaY > 0 ? 0.9 : 1.1;
    currentZoom = Math.max(0.5, Math.min(5, currentZoom * delta));
    updateImageZoom();
  }
</script>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">X-ray Image - Full Size</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body text-center p-0">
        <img
          id="modalImage"
          src=""
          class="img-fluid"
          alt="X-ray Image Full Size"
        />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <a href="" download class="btn btn-primary" id="downloadLink">
          <i class="fas fa-download me-2"></i>Download
        </a>
      </div>
    </div>
  </div>
</div>

<%- include('../partials/footer') %>
