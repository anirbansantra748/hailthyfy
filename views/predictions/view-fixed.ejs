<%- include('../partials/header') %>

<style>
  body {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    min-height: 100vh;
  }

  .hero-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem 0;
    margin-bottom: 2rem;
    border-radius: 0 0 30px 30px;
  }

  .card {
    border: none;
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
    overflow: hidden;
  }

  .card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0,0,0,0.15);
    transition: all 0.3s ease;
  }

  .status-badge {
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .xray-container {
    background: #000;
    border-radius: 15px;
    padding: 1rem;
    position: relative;
    min-height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .xray-image {
    max-width: 100%;
    max-height: 400px;
    object-fit: contain;
    cursor: pointer;
    filter: contrast(1.1) brightness(1.05);
    border-radius: 8px;
  }

  .xray-image:hover {
    filter: contrast(1.2) brightness(1.1);
  }

  .controls-overlay {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    gap: 5px;
  }

  .control-btn {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    border: none;
    background: rgba(255,255,255,0.9);
    color: #333;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .control-btn:hover {
    background: white;
    transform: scale(1.1);
  }

  .action-button {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 25px;
    color: white;
    padding: 12px 24px;
    margin: 5px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }

  .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    color: white;
    text-decoration: none;
  }

  .action-button.success { background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); }
  .action-button.warning { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
  .action-button.info { background: linear-gradient(135deg, #48dbfb 0%, #0abde3 100%); }
  .action-button.secondary { background: linear-gradient(135deg, #6c757d 0%, #495057 100%); }

  .prediction-item {
    background: white;
    border-radius: 10px;
    padding: 1rem;
    margin: 0.5rem 0;
    border-left: 4px solid;
    transition: all 0.3s ease;
  }

  .prediction-item:hover {
    transform: translateX(5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }

  .prediction-item.high-risk { border-left-color: #e74c3c; }
  .prediction-item.medium-risk { border-left-color: #f39c12; }
  .prediction-item.low-risk { border-left-color: #27ae60; }

  .chart-wrapper {
    height: 300px;
    position: relative;
  }

  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
  }

  .modal-content-custom {
    max-width: 90vw;
    max-height: 90vh;
    position: relative;
  }

  .modal-content-custom img {
    max-width: 100%;
    max-height: 90vh;
    border-radius: 10px;
  }

  .close-modal {
    position: absolute;
    top: -40px;
    right: 0;
    background: white;
    border: none;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    color: white;
    font-weight: 600;
    z-index: 10000;
    transform: translateX(400px);
    transition: transform 0.3s ease;
  }

  .notification.show {
    transform: translateX(0);
  }

  .notification.success { background: #27ae60; }
  .notification.error { background: #e74c3c; }
  .notification.info { background: #3498db; }

  @media (max-width: 768px) {
    .hero-header { padding: 1rem 0; }
    .xray-container { min-height: 300px; }
    .action-button { padding: 10px 20px; margin: 3px; }
  }

  /* Print Styles */
  @media print {
    .action-button, .controls-overlay, .hero-header, .notification {
      display: none !important;
    }
    
    body {
      background: white !important;
      color: black !important;
    }
    
    .card {
      box-shadow: none !important;
      border: 1px solid #ccc !important;
      page-break-inside: avoid;
    }
    
    .xray-container {
      background: white !important;
      border: 1px solid #ccc;
    }
    
    .xray-image {
      max-height: 400px;
      max-width: 100%;
    }
    
    .chart-wrapper {
      height: 300px;
    }
    
    h1, h2, h3, h4, h5 {
      color: black !important;
    }
    
    .prediction-item {
      border: 1px solid #ddd !important;
      margin-bottom: 10px;
    }
  }
</style>

<!-- Hero Header -->
<div class="hero-header">
  <div class="container">
    <div class="row align-items-center">
      <div class="col-md-8">
        <h1 class="mb-2">
          <i class="fas fa-x-ray me-2"></i>
          X-ray Analysis Results
        </h1>
        <p class="mb-0 opacity-75">AI-powered medical imaging analysis</p>
      </div>
      <div class="col-md-4 text-end">
        <% if (xray.status === 'completed') { %>
        <span class="status-badge bg-success">
          <i class="fas fa-check-circle me-1"></i>Analysis Complete
        </span>
        <% } else if (xray.status === 'processing') { %>
        <span class="status-badge bg-warning text-dark">
          <i class="fas fa-clock me-1"></i>Processing
        </span>
        <% } else if (xray.status === 'failed') { %>
        <span class="status-badge bg-danger">
          <i class="fas fa-exclamation-triangle me-1"></i>Failed
        </span>
        <% } %>
      </div>
    </div>
  </div>
</div>

<div class="container">
  <!-- Quick Stats -->
  <div class="row mb-4">
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fas fa-stethoscope fa-2x text-primary mb-2"></i>
          <h6 class="text-muted mb-1">Scan Type</h6>
          <h5 class="mb-0"><%= xray.scanType || 'Unknown' %></h5>
        </div>
      </div>
    </div>
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fas fa-calendar fa-2x text-success mb-2"></i>
          <h6 class="text-muted mb-1">Upload Date</h6>
          <h5 class="mb-0"><%= new Date(xray.createdAt).toLocaleDateString() %></h5>
        </div>
      </div>
    </div>
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fas fa-file fa-2x text-info mb-2"></i>
          <h6 class="text-muted mb-1">File Size</h6>
          <h5 class="mb-0">
            <% if (xray.file_size) { %>
              <%= (xray.file_size / 1024 / 1024).toFixed(2) %> MB
            <% } else { %>
              Unknown
            <% } %>
          </h5>
        </div>
      </div>
    </div>
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fas fa-clock fa-2x text-warning mb-2"></i>
          <h6 class="text-muted mb-1">Process Time</h6>
          <h5 class="mb-0">
            <%= xray.inference_time_ms ? `${xray.inference_time_ms}ms` : 'N/A' %>
          </h5>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="row">
    <!-- X-ray Image -->
    <div class="col-lg-7 mb-4">
      <div class="card">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">
            <i class="fas fa-image me-2"></i>X-ray Image
            <small class="opacity-75 ms-2">(<%= xray.scanType || 'Unknown' %> Scan)</small>
          </h5>
        </div>
        <div class="card-body p-3">
          <div class="xray-container">
            <% if (xray.image) { %>
            <img 
              src="<%= xray.image.startsWith('/uploads/') ? xray.image : (xray.image.startsWith('xrays/') ? '/uploads/' + xray.image : '/uploads/xrays/' + xray.image.replace(/^xrays\//, '').replace(/^\/+/, '')) %>" 
              alt="X-ray Image" 
              class="xray-image"
              id="mainXrayImage"
              onclick="openImageModal('<%= xray.image.startsWith('/uploads/') ? xray.image : (xray.image.startsWith('xrays/') ? '/uploads/' + xray.image : '/uploads/xrays/' + xray.image.replace(/^xrays\//, '').replace(/^\/+/, '')) %>')"
              onerror="handleImageError(this)"
            >
            <div class="controls-overlay">
              <button class="control-btn" onclick="openImageModal('<%= xray.image.startsWith('/uploads/') ? xray.image : (xray.image.startsWith('xrays/') ? '/uploads/' + xray.image : '/uploads/xrays/' + xray.image.replace(/^xrays\//, '').replace(/^\/+/, '')) %>')" title="Fullscreen">
                <i class="fas fa-expand"></i>
              </button>
            </div>
            <% } else { %>
            <div class="text-center text-white-50">
              <i class="fas fa-image fa-4x mb-3"></i>
              <h5>No Image Available</h5>
              <p>The X-ray image could not be loaded</p>
              <p>Debug - Image path: <%= xray.image ? (xray.image.startsWith('/uploads/') ? xray.image : (xray.image.startsWith('xrays/') ? '/uploads/' + xray.image : '/uploads/xrays/' + xray.image.replace(/^xrays\//, '').replace(/^\/+/, ''))) : 'No path' %></p>
            </div>
            <% } %>
          </div>
          
          <!-- Image Info -->
          <% if (xray.file_name) { %>
          <div class="row mt-3 text-center">
            <div class="col-md-6">
              <small class="text-muted">File Name</small>
              <div class="fw-bold"><%= xray.file_name %></div>
            </div>
            <div class="col-md-6">
              <small class="text-muted">File Type</small>
              <div class="fw-bold"><%= xray.file_mimetype || 'Unknown' %></div>
            </div>
          </div>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Analysis Results -->
    <div class="col-lg-5 mb-4">
      <% if (xray.status === 'completed' && xray.predictions) { %>
      <!-- Completed Analysis -->
      <div class="card">
        <div class="card-header bg-success text-white">
          <h5 class="mb-0">
            <i class="fas fa-check-circle me-2"></i>Analysis Results
          </h5>
        </div>
        <div class="card-body">
          <h6 class="fw-bold mb-3">Top Findings:</h6>
          <% 
          const predictions = xray.predictions || {};
          const sortedPredictions = Object.entries(predictions).sort(([,a], [,b]) => b - a).slice(0, 5);
          %>
          <% sortedPredictions.forEach(([label, confidence], index) => { %>
          <%
          const riskClass = confidence >= 0.7 ? 'high-risk' : confidence >= 0.4 ? 'medium-risk' : 'low-risk';
          const icon = index === 0 ? 'fas fa-trophy text-warning' : 
                      index === 1 ? 'fas fa-medal text-secondary' : 
                      'fas fa-award text-info';
          %>
          <div class="prediction-item <%= riskClass %>">
            <div class="d-flex justify-content-between align-items-center">
              <div class="d-flex align-items-center">
                <i class="<%= icon %> me-2"></i>
                <span class="fw-bold"><%= label.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) %></span>
              </div>
              <span class="badge bg-primary">
                <%= (confidence * 100).toFixed(1) %>%
              </span>
            </div>
          </div>
          <% }); %>

          <!-- Model Info -->
          <div class="mt-4">
            <h6 class="fw-bold">Model Information:</h6>
            <div class="row">
              <div class="col-6">
                <small class="text-muted">Version</small>
                <div class="fw-bold"><%= xray.model_version || 'Unknown' %></div>
              </div>
              <div class="col-6">
                <small class="text-muted">Analysis ID</small>
                <div class="fw-bold"><%= xray.inference_id || 'N/A' %></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <% } else if (xray.status === 'processing') { %>
      <!-- Processing Status -->
      <div class="card">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">
            <i class="fas fa-spinner fa-spin me-2"></i>Processing
          </h5>
        </div>
        <div class="card-body text-center">
          <i class="fas fa-cog fa-3x text-warning mb-3"></i>
          <h5>Analysis in Progress</h5>
          <p class="text-muted">Your X-ray is being analyzed by our AI system.</p>
          <div class="progress mb-3">
            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                 style="width: 75%"></div>
          </div>
          <button class="btn btn-primary" onclick="location.reload()">
            <i class="fas fa-sync me-1"></i>Refresh Status
          </button>
        </div>
      </div>

      <% } else if (xray.status === 'failed') { %>
      <!-- Failed Status -->
      <div class="card">
        <div class="card-header bg-danger text-white">
          <h5 class="mb-0">
            <i class="fas fa-exclamation-triangle me-2"></i>Analysis Failed
          </h5>
        </div>
        <div class="card-body text-center">
          <i class="fas fa-times-circle fa-3x text-danger mb-3"></i>
          <h5>Processing Failed</h5>
          <p class="text-danger">
            <%= xray.error_message || 'An error occurred during processing' %>
          </p>
          <div class="d-grid gap-2">
            <button class="action-button warning" onclick="retryAnalysis()">
              <i class="fas fa-redo me-1"></i>Retry Analysis
            </button>
            <a href="/prediction/xray/upload" class="action-button">
              <i class="fas fa-upload me-1"></i>Upload New X-ray
            </a>
          </div>
        </div>
      </div>
      <% } %>
    </div>
  </div>

  <!-- Debug Section (Remove in production) -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card border-warning">
        <div class="card-header bg-warning text-dark">
          <h6 class="mb-0"><i class="fas fa-bug me-2"></i>Debug Information</h6>
        </div>
        <div class="card-body">
          <small>
            <strong>Status:</strong> <%= xray.status %><br>
            <strong>Image:</strong> <%= xray.image %><br>
            <strong>Predictions Type:</strong> <%= typeof xray.predictions %><br>
            <strong>Predictions:</strong> <%= JSON.stringify(xray.predictions) %><br>
            <strong>Predictions Keys:</strong> <%= xray.predictions ? Object.keys(xray.predictions) : 'None' %><br>
          </small>
        </div>
      </div>
    </div>
  </div>

  <!-- Chart Section -->
  <% if (xray.status === 'completed' && xray.predictions && Object.keys(xray.predictions).length > 0) { %>
  <div class="row mb-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">
            <i class="fas fa-chart-bar me-2"></i>Prediction Distribution
          </h5>
        </div>
        <div class="card-body">
          <div class="chart-wrapper">
            <canvas id="predictionChart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% } else { %>
  <div class="row mb-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">
            <i class="fas fa-chart-bar me-2"></i>Prediction Distribution
          </h5>
        </div>
        <div class="card-body text-center text-muted">
          <i class="fas fa-info-circle fa-3x mb-3"></i>
          <h5>No Prediction Data Available</h5>
          <p>Charts will appear when analysis is completed and predictions are available.</p>
          <small>Current status: <%= xray.status %></small>
        </div>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Action Buttons -->
  <div class="text-center mb-4">
    <a href="/prediction/xray" class="action-button secondary">
      <i class="fas fa-list me-1"></i>Back to List
    </a>
    <a href="/prediction/xray/upload" class="action-button">
      <i class="fas fa-plus me-1"></i>Upload Another
    </a>
    <% if (xray.status === 'completed') { %>
    <a href="/prediction/xray/<%= xray._id %>/download" class="action-button success">
      <i class="fas fa-download me-1"></i>Download Report
    </a>
    <a href="/prediction/xray/<%= xray._id %>/export" class="action-button info">
      <i class="fas fa-file-export me-1"></i>Export Data
    </a>
    <button class="action-button warning" onclick="printPage()">
      <i class="fas fa-print me-1"></i>Print
    </button>
    <button class="action-button secondary" onclick="shareResults()">
      <i class="fas fa-share me-1"></i>Share
    </button>
    <% } %>
  </div>
</div>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Chart Data -->
<% 
const chartData = {};
if (xray.status === 'completed' && xray.predictions) {
  // Handle MongoDB Map or regular object
  let predictionsObj = {};
  if (xray.predictions instanceof Map) {
    // Convert Map to object
    for (let [key, value] of xray.predictions.entries()) {
      predictionsObj[key] = value;
    }
  } else if (typeof xray.predictions === 'object' && xray.predictions !== null) {
    // Handle Mongoose Map-like object
    if (xray.predictions.toObject) {
      predictionsObj = xray.predictions.toObject();
    } else {
      predictionsObj = xray.predictions;
    }
  }
  
  // Convert to chart format
  Object.entries(predictionsObj).forEach(([label, confidence]) => {
    if (typeof confidence === 'number' && !isNaN(confidence)) {
      chartData[label.replace(/_/g, ' ')] = (confidence * 100).toFixed(1);
    }
  });
}
%>

<script>
// Chart initialization
document.addEventListener('DOMContentLoaded', function() {
  const chartData = <%- JSON.stringify(chartData) %>;
  
  console.log('Chart data received:', chartData);
  console.log('Chart data keys:', Object.keys(chartData));
  console.log('Chart data values:', Object.values(chartData));
  
  if (Object.keys(chartData).length > 0) {
    const ctx = document.getElementById('predictionChart');
    console.log('Chart canvas element:', ctx);
    
    if (ctx) {
      try {
        new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: Object.keys(chartData),
            datasets: [{
              data: Object.values(chartData).map(v => parseFloat(v)),
              backgroundColor: [
                'rgba(231, 76, 60, 0.8)',   // Red
                'rgba(243, 156, 18, 0.8)',  // Orange  
                'rgba(39, 174, 96, 0.8)',   // Green
                'rgba(52, 152, 219, 0.8)',  // Blue
                'rgba(155, 89, 182, 0.8)',  // Purple
                'rgba(26, 188, 156, 0.8)',  // Teal
                'rgba(230, 126, 34, 0.8)',  // Dark Orange
                'rgba(52, 73, 94, 0.8)',    // Dark Blue
                'rgba(241, 196, 15, 0.8)',  // Yellow
                'rgba(233, 30, 99, 0.8)'    // Pink
              ],
              borderWidth: 2,
              borderColor: '#fff'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'right',
                labels: {
                  padding: 15,
                  usePointStyle: true,
                  font: {
                    size: 12
                  }
                }
              },
              tooltip: {
                backgroundColor: 'rgba(0,0,0,0.8)',
                titleColor: 'white',
                bodyColor: 'white',
                borderColor: 'rgba(255,255,255,0.2)',
                borderWidth: 1,
                cornerRadius: 8,
                callbacks: {
                  label: function(context) {
                    return context.label + ': ' + context.raw + '%';
                  }
                }
              }
            },
            animation: {
              duration: 1500,
              easing: 'easeInOutQuart'
            }
          }
        });
        console.log('Chart initialized successfully');
      } catch (error) {
        console.error('Error initializing chart:', error);
        // Show a fallback message
        ctx.parentElement.innerHTML = `
          <div class="text-center text-muted p-4">
            <i class="fas fa-chart-pie fa-3x mb-3"></i>
            <h5>Chart Data Available</h5>
            <p>Chart visualization temporarily unavailable</p>
            <small>Data: ${Object.keys(chartData).length} predictions found</small>
          </div>
        `;
      }
    } else {
      console.warn('Chart canvas element not found');
    }
  } else {
    console.log('No chart data available');
    const chartContainer = document.querySelector('.chart-wrapper');
    if (chartContainer) {
      chartContainer.innerHTML = `
        <div class="text-center text-muted p-4">
          <i class="fas fa-info-circle fa-3x mb-3"></i>
          <h5>No Prediction Data</h5>
          <p>Chart will appear when analysis is complete</p>
        </div>
      `;
    }
  }
});

// Image modal functionality
function openImageModal(imageSrc) {
  const modal = document.createElement('div');
  modal.className = 'modal-overlay';
  modal.onclick = function(e) {
    if (e.target === modal) {
      document.body.removeChild(modal);
    }
  };
  
  modal.innerHTML = `
    <div class="modal-content-custom">
      <button class="close-modal" onclick="this.closest('.modal-overlay').remove()">
        <i class="fas fa-times"></i>
      </button>
      <img src="${imageSrc}" alt="X-ray Fullscreen">
    </div>
  `;
  
  document.body.appendChild(modal);
}

// Handle image errors
function handleImageError(img) {
  img.style.display = 'none';
  const container = img.parentElement;
  container.innerHTML = `
    <div class="text-center text-white-50">
      <i class="fas fa-exclamation-triangle fa-4x mb-3"></i>
      <h5>Image Not Available</h5>
      <p>Could not load the X-ray image</p>
    </div>
  `;
}

// Show notification
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.innerHTML = `
    <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'times' : 'info'}-circle me-2"></i>
    ${message}
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => notification.classList.add('show'), 100);
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => document.body.removeChild(notification), 300);
  }, 3000);
}

// Download report function
function downloadReport() {
  showNotification('Generating report...', 'info');
  
  const reportData = {
    id: '<%= xray._id %>',
    scanType: '<%= xray.scanType %>',
    uploadDate: '<%= xray.createdAt %>',
    status: '<%= xray.status %>',
    predictions: JSON.parse('<%- JSON.stringify(xray.predictions || {}) %>'),
    modelVersion: '<%= xray.model_version || "Unknown" %>',
    processingTime: '<%= xray.inference_time_ms || "N/A" %>ms'
  };

  const reportContent = `
HEALTHFY X-RAY ANALYSIS REPORT
==============================

Report ID: ${reportData.id}
Scan Type: ${reportData.scanType}
Upload Date: ${new Date(reportData.uploadDate).toLocaleString()}
Status: ${reportData.status.toUpperCase()}
Model Version: ${reportData.modelVersion}
Processing Time: ${reportData.processingTime}

FINDINGS:
${Object.entries(reportData.predictions)
  .sort(([,a], [,b]) => b - a)
  .map(([condition, confidence]) => 
    `- ${condition.replace(/_/g, ' ')}: ${(confidence * 100).toFixed(1)}%`
  ).join('\\n')}

Generated: ${new Date().toLocaleString()}

DISCLAIMER: This analysis is generated by AI and should not be used as a substitute for professional medical diagnosis. Please consult with a qualified healthcare provider.
  `;

  const blob = new Blob([reportContent], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `xray-report-${reportData.id}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  showNotification('Report downloaded successfully!', 'success');
}

// Export data function
function exportData() {
  showNotification('Exporting data...', 'info');
  
  const exportData = {
    report: {
      id: '<%= xray._id %>',
      timestamp: new Date().toISOString(),
      xray: {
        status: '<%= xray.status %>',
        scanType: '<%= xray.scanType %>',
        uploadDate: '<%= xray.createdAt %>',
        fileName: '<%= xray.file_name || "Unknown" %>',
        fileSize: '<%= xray.file_size || 0 %>'
      },
      analysis: {
        predictions: JSON.parse('<%- JSON.stringify(xray.predictions || {}) %>'),
        modelVersion: '<%= xray.model_version || "Unknown" %>',
        processingTime: '<%= xray.inference_time_ms || 0 %>',
        inferenceId: '<%= xray.inference_id || "N/A" %>'
      }
    }
  };

  const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `xray-data-<%= xray._id %>.json`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  showNotification('Data exported successfully!', 'success');
}

// Print function
function printPage() {
  showNotification('Preparing for print...', 'info');
  
  // Add a small delay to show the notification
  setTimeout(() => {
    try {
      window.print();
    } catch (error) {
      console.error('Print error:', error);
      showNotification('Print failed. Please try again.', 'error');
    }
  }, 500);
}

// Share function
function shareResults() {
  if (navigator.share) {
    navigator.share({
      title: 'X-ray Analysis Results - HealthFy',
      text: 'Check out my X-ray analysis results from HealthFy AI!',
      url: window.location.href
    }).then(() => {
      showNotification('Results shared successfully!', 'success');
    }).catch(() => {
      // Fallback to clipboard
      copyToClipboard();
    });
  } else {
    copyToClipboard();
  }
}

function copyToClipboard() {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(window.location.href).then(() => {
      showNotification('Results URL copied to clipboard!', 'success');
    }).catch(() => {
      // Manual fallback
      showNotification('Please copy the URL manually from your browser', 'info');
    });
  } else {
    // Very old browser fallback
    showNotification('Please copy the URL manually from your browser', 'info');
  }
}

// Retry analysis function
function retryAnalysis() {
  if (confirm('Are you sure you want to retry the analysis?')) {
    showNotification('Retrying analysis...', 'info');
    
    fetch(`/prediction/xray/<%= xray._id %>/retry`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showNotification('Analysis restarted successfully!', 'success');
        setTimeout(() => location.reload(), 1500);
      } else {
        showNotification('Retry failed: ' + (data.message || 'Unknown error'), 'error');
      }
    })
    .catch(error => {
      showNotification('Error: ' + error.message, 'error');
    });
  }
}
</script>

<%- include('../partials/footer') %>
